(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{632:function(t,a,v){"use strict";v.r(a);var s=v(10),_=Object(s.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("总结Java基础内容")]),t._v(" "),v("h2",{attrs:{id:"_1-java-语言有哪些特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-java-语言有哪些特点"}},[t._v("#")]),t._v(" 1 Java 语言有哪些特点?")]),t._v(" "),v("ol",[v("li",[t._v("Java为纯面向对象的语言。它能够直接反应现实生活中的对象。")]),t._v(" "),v("li",[t._v("面向对象（"),v("strong",[t._v("封装，继承，多态")]),t._v("）；")]),t._v(" "),v("li",[t._v("平台无关性（ Java 虚拟机实现平台无关性）；")]),t._v(" "),v("li",[t._v("支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；")]),t._v(" "),v("li",[t._v("可靠性，安全性；")]),t._v(" "),v("li",[t._v("支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；")]),t._v(" "),v("li",[t._v("编译与解释并存；")])]),t._v(" "),v("h3",{attrs:{id:"面对对象三大特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#面对对象三大特性"}},[t._v("#")]),t._v(" 面对对象三大特性")]),t._v(" "),v("ol",[v("li",[t._v("继承：对象的一个新类都可以从现有的类中派生，派生类可以从他的基类那里继承方法和实例变量，且派生类可以修饰或者新增新的方法实质更适合特殊的要求\n"),v("ul",[v("li",[t._v("子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，"),v("strong",[t._v("只是拥有")]),t._v("。")]),t._v(" "),v("li",[t._v("子类可以拥有自己属性和方法，即子类可以对父类进行扩展。")]),t._v(" "),v("li",[t._v("子类可以用自己的方式实现父类的方法。")])])]),t._v(" "),v("li",[t._v("封装：将客观事物抽象类，每个类都可以把自身数据和方法只让可信的类或对象操作，对不可信的进行信息隐藏")]),t._v(" "),v("li",[t._v("多态：表示一个对象具有多种的状态，具体表现为父类的引用指向子类的实例。\n"),v("ul",[v("li",[t._v("对象类型和引用类型之间具有继承（类）/实现（接口）的关系；")]),t._v(" "),v("li",[t._v("引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；")]),t._v(" "),v("li",[t._v("多态不能调用“只在子类存在但在父类不存在”的方法；")]),t._v(" "),v("li",[t._v("如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。")])])])]),t._v(" "),v("h2",{attrs:{id:"_2-jvm-vs-jdk-vs-jre"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-jvm-vs-jdk-vs-jre"}},[t._v("#")]),t._v(" 2 JVM vs JDK vs JRE")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/image-20220422202512152.png",alt:"image-20220422202512152"}})]),t._v(" "),v("h3",{attrs:{id:"jvm"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[t._v("#")]),t._v(" JVM")]),t._v(" "),v("p",[t._v("JVM 关注的是 Java 字节码文件（类文件 "),v("code",[t._v(".class")]),t._v("），Java 字节码文件由 JVM 指令集、符号表以及一些补充信息组成。JVM 的主要工作是将 Java 字节码解释为本地机器码，实际就是将自己的指令集（Java 字节码）映射为本地 CPU 的指令集或操作系统的接口调用（本地机器码）。")]),t._v(" "),v("h3",{attrs:{id:"jre"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jre"}},[t._v("#")]),t._v(" JRE")]),t._v(" "),v("p",[t._v("即 Java 运行时环境，由运行和管理 Java 应用程序的类库和工具组成。JRE 中包含了 JVM，单纯的 JVM 不能运行 Java 程序，JVM 在解释 Java 字节码时需要用到一些核心类库，这些核心类库就被包含在 JRE 中，简单来说 JRE 就是 JVM + 核心类库。")]),t._v(" "),v("h3",{attrs:{id:"jdk"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jdk"}},[t._v("#")]),t._v(" JDK")]),t._v(" "),v("p",[t._v("JDK 全称 Java Development Kit，即 Java 开发工具包，是面向 Java 开发人员使用的 SDK（Software Development Kit，软件开发工具包），提供了 Java 程序的开发环境和运行环境。")]),t._v(" "),v("p",[t._v("JDK 包含了 JRE、基础类库（Java API，如网络、IO、线程、图形等）、Java 源码编译器 "),v("code",[t._v("javac")]),t._v("、以及其它的一系列用于开发、诊断、分析、调试、管理的工具和命令")]),t._v(" "),v("h2",{attrs:{id:"_3-什么是字节码-采用字节码的好处是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-什么是字节码-采用字节码的好处是什么"}},[t._v("#")]),t._v(" 3 什么是字节码?采用字节码的好处是什么?")]),t._v(" "),v("p",[v("strong",[t._v("Java 程序从源代码到运行的过程如下图所示：")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://snailclimb.gitee.io/javaguide/docs/java/basis/images/java%E7%A8%8B%E5%BA%8F%E8%BD%AC%E5%8F%98%E4%B8%BA%E6%9C%BA%E5%99%A8%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BF%87%E7%A8%8B.png",alt:"Java程序转变为机器代码的过程"}})]),t._v(" "),v("h3",{attrs:{id:"字节码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字节码"}},[t._v("#")]),t._v(" 字节码：")]),t._v(" "),v("p",[t._v("java中引入了虚拟机的概念，即在机器和编译程序之间加入了一层抽象的虚拟机的机器。这台虚拟的机器在任何平台上都提供给编译程序一个的共同的接口。")]),t._v(" "),v("p",[t._v("编译程序只需要面向虚拟机，生成虚拟机能够理解的代码，然后由"),v("strong",[t._v("解释器")]),t._v("来讲虚拟机代码转换为特定系统的机器码执行。在java中，这种供虚拟机理解的代码叫做字节码（即扩展名为.class的文件），它不面向任何特定的处理器，只面向虚拟机。")]),t._v(" "),v("h3",{attrs:{id:"采用字节码的好处"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#采用字节码的好处"}},[t._v("#")]),t._v(" 采用字节码的好处：")]),t._v(" "),v("p",[t._v("java语言通过字节码的方式，在一定程度上"),v("strong",[t._v("解决了传统解释型语言执行效率低的问题")]),t._v("，同时"),v("strong",[t._v("又保留了解释型语言可移植的特点")]),t._v("，所以java程序运行时比较高效，而且，由于"),v("strong",[t._v("字节码并不专对一种特定的机器")]),t._v("，因此，java程序"),v("strong",[t._v("无需重新编译即可在多种不同的计算机上个运行")]),t._v("。")]),t._v(" "),v("h2",{attrs:{id:"_4-为什么说-java-语言-编译与解释并存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-为什么说-java-语言-编译与解释并存"}},[t._v("#")]),t._v(" 4 为什么说 Java 语言“编译与解释并存”？")]),t._v(" "),v("p",[t._v("这是因为 Java 语言既具有编译型语言的特征，也具有解释型语言的特征。首先java会先编译成"),v("strong",[t._v("字节码.java文件")]),t._v("，再通过jvm中的解释器解释成为机器码来进行执行。")]),t._v(" "),v("p",[t._v("其实这个问题我们讲字节码的时候已经提到过，因为比较重要，所以我们这里再提一下。")]),t._v(" "),v("p",[t._v("我们可以将高级编程语言按照程序的执行方式分为两种：")]),t._v(" "),v("p",[v("strong",[t._v("编译型")]),t._v(" ："),v("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E8%AA%9E%E8%A8%80",target:"_blank",rel:"noopener noreferrer"}},[t._v("编译型语言"),v("OutboundLink")],1),t._v(" 会通过"),v("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("编译器"),v("OutboundLink")],1),t._v("将源代码"),v("strong",[t._v("一次性翻译")]),t._v("成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。")]),t._v(" "),v("p",[v("strong",[t._v("解释型")]),t._v(" ："),v("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80",target:"_blank",rel:"noopener noreferrer"}},[t._v("解释型语言"),v("OutboundLink")],1),t._v("会通过"),v("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("解释器"),v("OutboundLink")],1),t._v("一"),v("strong",[t._v("句一句的将代码解释")]),t._v("（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://snailclimb.gitee.io/javaguide/docs/java/basis/images/%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80.png",alt:"编译型语言和解释型语言"}})]),t._v(" "),v("h2",{attrs:{id:"_5-java和javascript的差别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-java和javascript的差别"}},[t._v("#")]),t._v(" 5 java和javascript的差别")]),t._v(" "),v("ol",[v("li",[v("p",[v("strong",[t._v("强类型语言和弱类型语言")])]),t._v(" "),v("p",[t._v("java是一个强类型语言变量使用前必须声明，而js是一种弱类型语言")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("数据类型不同")])]),t._v(" "),v("ul",[v("li",[t._v("Java 中有 8 种基本数据类型，分别为：4 种整数型："),v("code",[t._v("byte")]),t._v("、"),v("code",[t._v("short")]),t._v("、"),v("code",[t._v("int")]),t._v("、"),v("code",[t._v("long")]),t._v(",2 种浮点型："),v("code",[t._v("float")]),t._v("、"),v("code",[t._v("double")]),t._v(",1 种字符类型："),v("code",[t._v("char")]),t._v("1 种布尔型："),v("code",[t._v("boolean")]),t._v("。")]),t._v(" "),v("li",[t._v("js基础数据类型是Number，Boolean，Null,underfinde,String,Symbol,BigInt")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("执行环境不同")])]),t._v(" "),v("ul",[v("li",[t._v("Java应用程序可以在任何虚拟机（JVM）或Web浏览器中运行，执行时会使用更多内存")]),t._v(" "),v("li",[t._v("JavaScript代码仅在浏览器上运行，因为JavaScript是仅针对浏览器开发的。它运行时只需要很少的内存，因此它可以在网页中被使用。")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("定位不同")])]),t._v(" "),v("ul",[v("li",[t._v("javascript一种可以嵌入Web页面中的基于对象和事件驱动的解释性语言,一开始js的名字并不是Javascript而是LiveScript是通过SUN Micorsysems授权而有的；")]),t._v(" "),v("li",[t._v("Java是SUN Microsystems公司推出的新一代面向对象的程序设计语言，特别适合于Internet应用程序开发")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("多线程")])])])]),t._v(" "),v("ul",[v("li",[t._v("Java 利用其多线程能力并具有基于线程的方法，而 JavaScript 则遵循事件驱动的方法。")])]),t._v(" "),v("ol",{attrs:{start:"6"}},[v("li",[t._v("面对对象区别\n"),v("ul",[v("li",[t._v("java是纯面对对象的语言支持封装，继承以及多态")]),t._v(" "),v("li",[t._v("但是js是一个弱类型语言并没有多态这个概念。")])])])]),t._v(" "),v("h2",{attrs:{id:"_6-java-和-c-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-java-和-c-的区别"}},[t._v("#")]),t._v(" 6 Java 和 C++ 的区别?")]),t._v(" "),v("p",[t._v("Java 和 C++ 都是面向对象的语言，都支持封装、继承和多态，但是，它们还是有挺多不相同的地方：")]),t._v(" "),v("ul",[v("li",[t._v("Java 不提供指针来直接访问内存，程序内存更加安全")]),t._v(" "),v("li",[t._v("Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。")]),t._v(" "),v("li",[t._v("Java 有自动内存管理垃圾回收机制(GC)，不需要程序员手动释放无用内存。")]),t._v(" "),v("li",[t._v("C++同时支持方法重载和操作符重载，但是 Java 只支持方法重载（操作符重载增加了复杂性，这与 Java 最初的设计思想不符）。")])]),t._v(" "),v("h2",{attrs:{id:"_7-基本语法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-基本语法"}},[t._v("#")]),t._v(" 7 基本语法")]),t._v(" "),v("h3",{attrs:{id:"字符型常量和字符串常量的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字符型常量和字符串常量的区别"}},[t._v("#")]),t._v(" 字符型常量和字符串常量的区别?")]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("形式")]),t._v("：字符常量有单引号进行包裹，字符串常量是双引号引起的 0 个或若干个字符。")]),t._v(" "),v("li",[t._v("字符常量相当于"),v("strong",[t._v("一个整型值")]),t._v("( ASCII 值),可以参加表达式运算; "),v("strong",[t._v("字符串常量代表一个地址值")]),t._v("(该字符串在内存中存放位置)。")]),t._v(" "),v("li",[v("strong",[t._v("占内存大小")]),t._v(" ： 字符常量只占 2 个字节; 字符串常量占若干个字节。")])]),t._v(" "),v("h3",{attrs:{id:"访问修饰符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#访问修饰符"}},[t._v("#")]),t._v(" 访问修饰符：")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("default")]),t._v("默认访问修饰符，在同一包内可见")]),t._v(" "),v("li",[v("strong",[t._v("private")]),t._v("对同一类内可见，不能修饰类")]),t._v(" "),v("li",[v("strong",[t._v("protected")]),t._v("对同一包内的类和所有子类可见，不能修饰类")]),t._v(" "),v("li",[v("strong",[t._v("public")]),t._v("对所有的类可见")])]),t._v(" "),v("h3",{attrs:{id:"标识符和关键字的区别是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#标识符和关键字的区别是什么"}},[t._v("#")]),t._v(" 标识符和关键字的区别是什么？")]),t._v(" "),v("p",[t._v("需要为程序、类、变量进行赋予名字因此就出现了"),v("strong",[t._v("标识符")])]),t._v(" "),v("p",[t._v("Java 语言已经赋予了其特殊的含义，只能用于特定的地方，这些特殊的标识符就是 "),v("strong",[t._v("关键字")])]),t._v(" "),v("h3",{attrs:{id:"java的关键字有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java的关键字有哪些"}},[t._v("#")]),t._v(" JAVA的关键字有哪些")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("分类")]),t._v(" "),v("th",[t._v("关键字")]),t._v(" "),v("th"),t._v(" "),v("th"),t._v(" "),v("th"),t._v(" "),v("th"),t._v(" "),v("th"),t._v(" "),v("th")])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("访问控制")]),t._v(" "),v("td",[t._v("private")]),t._v(" "),v("td",[t._v("protected")]),t._v(" "),v("td",[t._v("public")]),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("类，方法和变量修饰符")]),t._v(" "),v("td",[t._v("abstract")]),t._v(" "),v("td",[t._v("class")]),t._v(" "),v("td",[t._v("extends")]),t._v(" "),v("td",[t._v("final")]),t._v(" "),v("td",[t._v("implements")]),t._v(" "),v("td",[t._v("interface")]),t._v(" "),v("td",[t._v("native")])]),t._v(" "),v("tr",[v("td"),t._v(" "),v("td",[t._v("new")]),t._v(" "),v("td",[t._v("static")]),t._v(" "),v("td",[t._v("strictfp")]),t._v(" "),v("td",[t._v("synchronized")]),t._v(" "),v("td",[t._v("transient")]),t._v(" "),v("td",[t._v("volatile")]),t._v(" "),v("td",[t._v("enum")])]),t._v(" "),v("tr",[v("td",[t._v("程序控制")]),t._v(" "),v("td",[t._v("break")]),t._v(" "),v("td",[t._v("continue")]),t._v(" "),v("td",[t._v("return")]),t._v(" "),v("td",[t._v("do")]),t._v(" "),v("td",[t._v("while")]),t._v(" "),v("td",[t._v("if")]),t._v(" "),v("td",[t._v("else")])]),t._v(" "),v("tr",[v("td"),t._v(" "),v("td",[t._v("for")]),t._v(" "),v("td",[t._v("instanceof")]),t._v(" "),v("td",[t._v("switch")]),t._v(" "),v("td",[t._v("case")]),t._v(" "),v("td",[t._v("default")]),t._v(" "),v("td",[t._v("assert")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("错误处理")]),t._v(" "),v("td",[t._v("try")]),t._v(" "),v("td",[t._v("catch")]),t._v(" "),v("td",[t._v("throw")]),t._v(" "),v("td",[t._v("throws")]),t._v(" "),v("td",[t._v("finally")]),t._v(" "),v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("包相关")]),t._v(" "),v("td",[t._v("import")]),t._v(" "),v("td",[t._v("package")]),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("基本类型")]),t._v(" "),v("td",[t._v("boolean")]),t._v(" "),v("td",[t._v("byte")]),t._v(" "),v("td",[t._v("char")]),t._v(" "),v("td",[t._v("double")]),t._v(" "),v("td",[t._v("float")]),t._v(" "),v("td",[t._v("int")]),t._v(" "),v("td",[t._v("long")])]),t._v(" "),v("tr",[v("td"),t._v(" "),v("td",[t._v("short")]),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("变量引用")]),t._v(" "),v("td",[t._v("super")]),t._v(" "),v("td",[t._v("this")]),t._v(" "),v("td",[t._v("void")]),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("保留字")]),t._v(" "),v("td",[t._v("goto")]),t._v(" "),v("td",[t._v("const")]),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td"),t._v(" "),v("td")])])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"title"},[t._v("所有的关键字都是小写的，在 IDE 中会以特殊颜色显示。")]),v("p",[v("code",[t._v("default")]),t._v(" 这个关键字很特殊，既属于程序控制，也属于类，方法和变量修饰符，还属于访问控制。")]),t._v(" "),v("ul",[v("li",[t._v("在程序控制中，当在 "),v("code",[t._v("switch")]),t._v(" 中匹配不到任何情况时，可以使用 "),v("code",[t._v("default")]),t._v(" 来编写默认匹配的情况。")]),t._v(" "),v("li",[t._v("在类，方法和变量修饰符中，从 JDK8 开始引入了默认方法，可以使用 "),v("code",[t._v("default")]),t._v(" 关键字来定义一个方法的默认实现。")]),t._v(" "),v("li",[t._v("在访问控制中，如果一个方法前没有任何修饰符，则默认会有一个修饰符 "),v("code",[t._v("default")]),t._v("，但是这个修饰符加上了就会报错。")])])]),v("p",[t._v("⚠️注意 ：虽然 true, false, 和 null 看起来像关键字但实际上他们是字面值，同时你也不可以作为标识符来使用。")]),t._v(" "),v("h3",{attrs:{id:"方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),v("h4",{attrs:{id:"静态方法为什么不能调用非静态成员"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#静态方法为什么不能调用非静态成员"}},[t._v("#")]),t._v(" 静态方法为什么不能调用非静态成员?")]),t._v(" "),v("p",[t._v("主要原因：")]),t._v(" "),v("ol",[v("li",[t._v("静态方法属于类的在类加载的时候就分配了内存，可以通过类名直接进行访问，而非静态成员属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问。")]),t._v(" "),v("li",[t._v("在类的非静态成员不存在的时候静态成员就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。")])]),t._v(" "),v("h4",{attrs:{id:"静态方法和实例方法有何不同"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#静态方法和实例方法有何不同"}},[t._v("#")]),t._v(" 静态方法和实例方法有何不同？")]),t._v(" "),v("p",[v("strong",[t._v("1、调用方式")])]),t._v(" "),v("p",[t._v("在外部调用静态方法时，可以使用 "),v("code",[t._v("类名.方法名")]),t._v(" 的方式，也可以使用 "),v("code",[t._v("对象.方法名")]),t._v(" 的方式，而实例方法只有后面这种方式。也就是说，"),v("strong",[t._v("调用静态方法可以无需创建对象")]),t._v(" 。")]),t._v(" "),v("p",[t._v("因此，一般建议使用 "),v("code",[t._v("类名.方法名")]),t._v(" 的方式来调用静态方法。")]),t._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//......")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("staicMethod")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//......")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" person "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用实例方法")]),t._v("\n        person"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用静态方法")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("staicMethod")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br"),v("span",{staticClass:"line-number"},[t._v("8")]),v("br"),v("span",{staticClass:"line-number"},[t._v("9")]),v("br"),v("span",{staticClass:"line-number"},[t._v("10")]),v("br"),v("span",{staticClass:"line-number"},[t._v("11")]),v("br"),v("span",{staticClass:"line-number"},[t._v("12")]),v("br"),v("span",{staticClass:"line-number"},[t._v("13")]),v("br"),v("span",{staticClass:"line-number"},[t._v("14")]),v("br"),v("span",{staticClass:"line-number"},[t._v("15")]),v("br"),v("span",{staticClass:"line-number"},[t._v("16")]),v("br")])]),v("p",[v("strong",[t._v("2、访问类成员是否存在限制")])]),t._v(" "),v("p",[t._v("静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），不允许访问实例成员（即实例成员变量和实例方法），而实例方法不存在这个限制。")]),t._v(" "),v("h4",{attrs:{id:"重载和重写的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#重载和重写的区别"}},[t._v("#")]),t._v(" "),v("a",{attrs:{href:"https://snailclimb.gitee.io/javaguide/#/docs/java/basis/java-basic-questions-01?id=%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99%E7%9A%84%E5%8C%BA%E5%88%AB",target:"_blank",rel:"noopener noreferrer"}},[t._v("重载和重写的区别"),v("OutboundLink")],1)]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"title"}),v("p",[t._v("重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理")]),t._v(" "),v("p",[t._v("重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法")])]),v("p",[v("strong",[t._v("重载")])]),t._v(" "),v("p",[t._v("发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。")]),t._v(" "),v("p",[v("strong",[t._v("重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。")])]),t._v(" "),v("p",[v("strong",[t._v("重写")]),t._v("（覆盖）")]),t._v(" "),v("p",[t._v("重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。")]),t._v(" "),v("ol",[v("li",[t._v("方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。")]),t._v(" "),v("li",[t._v("如果父类方法访问修饰符为 "),v("code",[t._v("private/final/static")]),t._v(" 则子类就不能重写该方法，但是被 "),v("code",[t._v("static")]),t._v(" 修饰的方法能够被再次声明。")]),t._v(" "),v("li",[t._v("构造方法无法被重写")])]),t._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Hero")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("name")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"超级英雄"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SuperMan")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Hero")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("name")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"超人"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Hero")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("hero")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Hero")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SuperSuperMan")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SuperMan")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("name")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"超级超级英雄"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),v("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SuperMan")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("hero")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SuperMan")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br"),v("span",{staticClass:"line-number"},[t._v("8")]),v("br"),v("span",{staticClass:"line-number"},[t._v("9")]),v("br"),v("span",{staticClass:"line-number"},[t._v("10")]),v("br"),v("span",{staticClass:"line-number"},[t._v("11")]),v("br"),v("span",{staticClass:"line-number"},[t._v("12")]),v("br"),v("span",{staticClass:"line-number"},[t._v("13")]),v("br"),v("span",{staticClass:"line-number"},[t._v("14")]),v("br"),v("span",{staticClass:"line-number"},[t._v("15")]),v("br"),v("span",{staticClass:"line-number"},[t._v("16")]),v("br"),v("span",{staticClass:"line-number"},[t._v("17")]),v("br"),v("span",{staticClass:"line-number"},[t._v("18")]),v("br"),v("span",{staticClass:"line-number"},[t._v("19")]),v("br"),v("span",{staticClass:"line-number"},[t._v("20")]),v("br"),v("span",{staticClass:"line-number"},[t._v("21")]),v("br"),v("span",{staticClass:"line-number"},[t._v("22")]),v("br"),v("span",{staticClass:"line-number"},[t._v("23")]),v("br"),v("span",{staticClass:"line-number"},[t._v("24")]),v("br"),v("span",{staticClass:"line-number"},[t._v("25")]),v("br")])]),v("h3",{attrs:{id:"构造方法、成员变量以及静态成员变量三者初始化顺序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#构造方法、成员变量以及静态成员变量三者初始化顺序"}},[t._v("#")]),t._v(" 构造方法、成员变量以及静态成员变量三者初始化顺序")]),t._v(" "),v("p",[t._v("先后顺序：静态成员变量，成员变量，构造方法；详细先后顺序：父类静态变量、父类静态代码块、 子类静态变量、子类静态代码块、父类非静态变量、父类非静态代码块、父类构造函数、子类非静态变量、子类非静态代码块、子类构造函数。")]),t._v(" "),v("blockquote",[v("p",[t._v("构造函数也是构造方法的一种；但是相当于js中的constructor")])]),t._v(" "),v("h2",{attrs:{id:"_8-接口和抽象类的相同和不同点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-接口和抽象类的相同和不同点"}},[t._v("#")]),t._v(" 8 接口和抽象类的相同和不同点")]),t._v(" "),v("h3",{attrs:{id:"相同点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相同点"}},[t._v("#")]),t._v(" 相同点：")]),t._v(" "),v("ul",[v("li",[t._v("都不能被实例化。")]),t._v(" "),v("li",[t._v("都可以包含抽象方法。")]),t._v(" "),v("li",[t._v("都可以有默认实现的方法（Java 8 可以用 "),v("code",[t._v("default")]),t._v(" 关键字在接口中定义默认方法）。")])]),t._v(" "),v("h3",{attrs:{id:"不同点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#不同点"}},[t._v("#")]),t._v(" 不同点：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("接口主要用于对类的行为进行约束，你实现了某个接口就具有了对应的行为。抽象类主要用于代码复用，强调的是所属关系（比如说我们抽象了一个发送短信的抽象类，）。")])]),t._v(" "),v("li",[v("p",[t._v("一个类只能继承一个类，但是可以实现多个接口。")])]),t._v(" "),v("li",[v("p",[t._v("接口中的成员变量只能是 "),v("code",[t._v("public static final")]),t._v(" 类型的，不能被修改且必须有初始值，而抽象类的成员变量默认 default，可在子类中被重新定义，也可被重新赋值")])]),t._v(" "),v("li",[v("p",[t._v("当子类和父类存在逻辑上的层次结构，推荐使用抽象类；")]),t._v(" "),v("p",[t._v("当功能不需要， 希望支持差别较大的两个或更多对象间的特定交互行为，推荐使用接口。使用接口能降低软件系统 的耦合度，便于日后维护或添加删除方法。")])])]),t._v(" "),v("h2",{attrs:{id:"_9-为什么java不支持多重重载"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_9-为什么java不支持多重重载"}},[t._v("#")]),t._v(" 9 为什么Java不支持多重重载")]),t._v(" "),v("ul",[v("li",[t._v("为了程序的结构更加清晰从而便于维护。假设Java语言支持多重继承，类C继承自类A和类B,如 果类A和B都有自定义的成员方法f(),那么当代码中调用类C的f()会产生二义性。Java语言通过实现多 个接口间接支持多重继承，接口由于只包含方法定义，不能有方法的实现，类C继承接口A与接口B 时即使它们都有方法f(),也不能直接调用方法，需实现具体的f()方法才能调用，不会产生二义性。")]),t._v(" "),v("li",[t._v("多类继承会导致类型转换，构造方法的调用顺序变得复杂，会影响到性能。")])]),t._v(" "),v("h2",{attrs:{id:"_10-final-finally-finalize"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-final-finally-finalize"}},[t._v("#")]),t._v(" 10 final，finally，finalize")]),t._v(" "),v("ul",[v("li",[t._v("final用于声明属性、方法和类，分别表示属性不可变、方法不可覆盖、类不可继承。")]),t._v(" "),v("li",[t._v("finally作为异常处理的一部分，只能在try/catch语句中使用，finally附带一个语句块用来表示这个 语句最终一定被执行，经常被用在需要释放资源的情况下。")]),t._v(" "),v("li",[t._v("finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的finalize()方法。当垃 圾回收器准备好释放对象占用空间时，首先会调用finalize()方法，并在下一次垃圾回收动作发生时 真正回收对象占用的内存。")])]),t._v(" "),v("h2",{attrs:{id:"_11-出现在java程序中的finally代码块是否一定会执行"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_11-出现在java程序中的finally代码块是否一定会执行"}},[t._v("#")]),t._v(" 11 出现在Java程序中的finally代码块是否一定会执行？")]),t._v(" "),v("p",[t._v("不一定；当遇到下面情况不会执行")]),t._v(" "),v("ol",[v("li",[t._v("当程序进入try语句之前就出现异常就会直接结束")]),t._v(" "),v("li",[t._v("当程序在try块中强制退出时，如使用System.exit(0)")])]),t._v(" "),v("p",[t._v("其它情况下，在try/catch/finally语句执行的时候，try块先执行，当有异常发生，catch和finally进行处理后程序就结束了，当没有异常发生，在执行完finally中的代码后，后面代码会继续执行。值得注意的是，当try/catch语句块中有return时，finally语句块中的代码会在return之前执行。如果 try/catch/finally块中都有return语句，finally块中的return语句会覆盖try/catch模块中的return语句。")]),t._v(" "),v("h2",{attrs:{id:"_12-java语言中关键字static的作用是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_12-java语言中关键字static的作用是什么"}},[t._v("#")]),t._v(" 12. Java语言中关键字static的作用是什么？")]),t._v(" "),v("ol",[v("li",[t._v("为某种特定数据类型或对象分配与创建对象个数无关的单一的储存空间")]),t._v(" "),v("li",[t._v("使得某个方法或属性与类而不是与对象关联在一起，即在不创建对象的情况下课通过类直接调用方法或使用类的属性")])]),t._v(" "),v("p",[t._v("具体而言static又分为4中使用方式：")]),t._v(" "),v("ol",[v("li",[t._v("修饰成员变量。用static关键字修饰的静态变量在内存中只有一个副本。只要静态变量所在的类被 加载，这个静态变量就会被分配空间，可以使用''类.静态变量''和''对象.静态变量''的方法使用。")]),t._v(" "),v("li",[t._v("修饰成员方法。static修饰的方法无需创建对象就可以被调用。static方法中不能使用this和super关 键字，不能调用非static方法，只能访问所属类的静态成员变量和静态成员方法。")]),t._v(" "),v("li",[t._v("修饰代码块。JVM在加载类的时候会执行static代码块。static代码块常用于初始化静态变量。static 代码块只会被执行一次。")]),t._v(" "),v("li",[t._v("修饰内部类。static内部类可以不依赖外部类实例对象而被实例化。静态内部类不能与外部类有相同的名字，不能访问普通成员变量，只能访问外部类中的静态成员和静态成员方法。")])]),t._v(" "),v("h2",{attrs:{id:"_13-string和stringbuffer、stringbuilder"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_13-string和stringbuffer、stringbuilder"}},[t._v("#")]),t._v(" 13 String和StringBuffer、StringBuilder")]),t._v(" "),v("p",[t._v("StringBuffer对象的内容可以修改；而String对象一旦产生后就不可以被修改，重新赋值，其实是两个对象。")]),t._v(" "),v("p",[v("strong",[t._v("String")]),t._v("是对象，不是原始类型；为不可变对象，一旦被创建，就不能修改其值。对于已经存在的String对象的修改，实际上是重新创建一个新的对象，然后把新的值保存进去。String是final类，不能被继承。")]),t._v(" "),v("p",[v("strong",[t._v("StringBuffer")]),t._v('是一个可变对象，当对它修改的时候，不会像String那样重新建立对象，它只能通过构造函数来建立。对象被创立后，会分配内存空间，并初始保存一个null。向StringBuffer中赋值的时候，可以通过它的append方法：obj.append("hello");可以理解为实现线程安全的StringBuilder;')]),t._v(" "),v("p",[v("strong",[t._v("StringBuilder")]),t._v("，采用的无final修饰的字符进行保存，因此可变。但线程不安全；")]),t._v(" "),v("h3",{attrs:{id:"使用总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用总结"}},[t._v("#")]),t._v(" 使用总结")]),t._v(" "),v("ol",[v("li",[t._v("操作少量的数据: 适用 "),v("code",[t._v("String")])]),t._v(" "),v("li",[t._v("单线程操作字符串缓冲区下操作大量数据: 适用 "),v("code",[t._v("StringBuilder")])]),t._v(" "),v("li",[t._v("多线程操作字符串缓冲区下操作大量数据: 适用 "),v("code",[t._v("StringBuffer")])])]),t._v(" "),v("h2",{attrs:{id:"_14-判断运算法-与equals的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_14-判断运算法-与equals的区别"}},[t._v("#")]),t._v(" 14 判断运算法"),v("code",[t._v("==")]),t._v("与"),v("code",[t._v("equals")]),t._v("的区别")]),t._v(" "),v("p",[v("code",[t._v("==")]),t._v(" 比较的是引用，"),v("code",[t._v("equals")]),t._v("比较的是内容")]),t._v(" "),v("ul",[v("li",[t._v("如果变量是基础数据类型，== 用于比较其对应值是否相等。如果变量指向的是对象,== 用于比较两 个对象是否指向同一块存储空间。")]),t._v(" "),v("li",[t._v("equals是Object类提供的方法之一，每个Java类都继承自Object类，所以每个对象都具有equals这 个方法。Object类中定义的equals方法内部是直接调用 == 比较对象的。但通过覆盖的方法可以让它不是比较引用而是比较数据内容。")])]),t._v(" "),v("h2",{attrs:{id:"_15-序列化是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-序列化是什么"}},[t._v("#")]),t._v(" 15 序列化是什么？")]),t._v(" "),v("p",[v("strong",[t._v("序列化")]),t._v("是一种将对象转换成字节序列的过程，用于解决在对对象流进行读写操作时所引发的问题。序列化可以将对象的状态写在流里进行网络传输，或者保存到文件、数据库等系统里，并在需要的时候把该流读取出来重新构造成一个相同的对象。")]),t._v(" "),v("p",[t._v("**反序列化：**将字节序列转化为java对象。")]),t._v(" "),v("h2",{attrs:{id:"_16-简书java的异常的分类以及处理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_16-简书java的异常的分类以及处理"}},[t._v("#")]),t._v(" 16 简书Java的异常的分类以及处理")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2013/12/exception-hierarchy.png",alt:"java异常"}})]),t._v(" "),v("h3",{attrs:{id:"exception-和-error-有什么区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#exception-和-error-有什么区别"}},[t._v("#")]),t._v(" Exception 和 Error 有什么区别？")]),t._v(" "),v("p",[t._v("在 Java 中，所有的异常都有一个共同的祖先 "),v("code",[t._v("java.lang")]),t._v(" 包中的 "),v("code",[t._v("Throwable")]),t._v(" 类。"),v("code",[t._v("Throwable")]),t._v(" 类有两个重要的子类:")]),t._v(" "),v("ul",[v("li",[v("strong",[v("code",[t._v("Exception")])]),t._v(" :程序本身可以处理的异常，可以通过 "),v("code",[t._v("catch")]),t._v(" 来进行捕获。"),v("code",[t._v("Exception")]),t._v(" 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。")]),t._v(" "),v("li",[v("strong",[v("code",[t._v("Error")])]),t._v(" ："),v("code",[t._v("Error")]),t._v(" 属于程序无法处理的错误 ，我们没办法通过 "),v("code",[t._v("catch")]),t._v(" 来进行捕获不建议通过"),v("code",[t._v("catch")]),t._v("捕获 。例如 Java 虚拟机运行错误（"),v("code",[t._v("Virtual MachineError")]),t._v("）、虚拟机内存不够错误("),v("code",[t._v("OutOfMemoryError")]),t._v(")、类定义错误（"),v("code",[t._v("NoClassDefFoundError")]),t._v("）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。")])]),t._v(" "),v("h3",{attrs:{id:"_16-1-throw和throws区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_16-1-throw和throws区别"}},[t._v("#")]),t._v(" 16.1 throw和throws区别")]),t._v(" "),v("ul",[v("li",[t._v("throw一般是用在方法体内部，有开发者定义当程序语句出现问题后主动抛出的一个异常")]),t._v(" "),v("li",[t._v("throws一般用于方法声明上，带边该方法可能会抛出的异常列表")])]),t._v(" "),v("h3",{attrs:{id:"_16-2-异常处理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_16-2-异常处理"}},[t._v("#")]),t._v(" 16.2 异常处理")]),t._v(" "),v("ul",[v("li",[t._v("try-catch-finally")]),t._v(" "),v("li",[t._v("声明抛出异常是Java处理异常的第二种方式（throws）")])]),t._v(" "),v("h2",{attrs:{id:"_17-泛型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_17-泛型"}},[t._v("#")]),t._v(" 17 泛型")]),t._v(" "),v("p",[t._v("泛型，即“参数化类型”，解决不确定对象具体类型的问题。在编译阶段有效。在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型在类中称为"),v("strong",[t._v("泛型类")]),t._v("、接口中称为"),v("strong",[t._v("泛型接口")]),t._v("和方法中称为"),v("strong",[t._v("泛型方法")]),t._v("。")]),t._v(" "),v("h3",{attrs:{id:"泛型擦除"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#泛型擦除"}},[t._v("#")]),t._v(" 泛型擦除")]),t._v(" "),v("p",[t._v("Java编译器生成的字节码是不包涵泛型信息的，泛型类型信息将在编译处理是被擦除，这个过程被称为 泛型擦除。")]),t._v(" "),v("h2",{attrs:{id:"_18-java反射机制是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_18-java反射机制是什么"}},[t._v("#")]),t._v(" 18 Java反射机制是什么？")]),t._v(" "),v("p",[t._v("对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为 Java 语言的反射机制。")]),t._v(" "),v("p",[t._v("简单来说，通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。")]),t._v(" "),v("ul",[v("li",[t._v("Class类：可获得类属性方法")]),t._v(" "),v("li",[t._v("Field类：获得类的成员变量")]),t._v(" "),v("li",[t._v("Method类：获取类的方法信息")]),t._v(" "),v("li",[t._v("Construct类：获取类的构造方法等信息")])]),t._v(" "),v("h2",{attrs:{id:"_19-java数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_19-java数据类型"}},[t._v("#")]),t._v(" 19 Java数据类型")]),t._v(" "),v("h3",{attrs:{id:"java的基本数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java的基本数据类型"}},[t._v("#")]),t._v(" Java的基本数据类型：")]),t._v(" "),v("p",[t._v("基本数据类型的局部变量放在栈中，基本数据类型的成员变量（未被"),v("code",[t._v("static")]),t._v("修饰）存放在java堆中；")]),t._v(" "),v("p",[t._v("Java 中有 8 种基本数据类型，分别为：")]),t._v(" "),v("ul",[v("li",[t._v("整数类型：long、int、short、byte")]),t._v(" "),v("li",[t._v("浮点类型：float、double")]),t._v(" "),v("li",[t._v("字符类型：char")]),t._v(" "),v("li",[t._v("布尔类型：boolean")])]),t._v(" "),v("p",[t._v("这 8 种基本数据类型的默认值以及所占空间的大小如下：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("基本类型")]),t._v(" "),v("th",[t._v("位数")]),t._v(" "),v("th",[t._v("字节")]),t._v(" "),v("th",[t._v("默认值")]),t._v(" "),v("th",[t._v("取值范围")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("byte")])]),t._v(" "),v("td",[t._v("8")]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td",[t._v("0")]),t._v(" "),v("td",[t._v("-128 ~ 127")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("short")])]),t._v(" "),v("td",[t._v("16")]),t._v(" "),v("td",[t._v("2")]),t._v(" "),v("td",[t._v("0")]),t._v(" "),v("td",[t._v("-32768 ~ 32767")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("int")])]),t._v(" "),v("td",[t._v("32")]),t._v(" "),v("td",[t._v("4")]),t._v(" "),v("td",[t._v("0")]),t._v(" "),v("td",[t._v("-2147483648 ~ 2147483647")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("long")])]),t._v(" "),v("td",[t._v("64")]),t._v(" "),v("td",[t._v("8")]),t._v(" "),v("td",[t._v("0L")]),t._v(" "),v("td",[t._v("-9223372036854775808 ~ 9223372036854775807")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("char")])]),t._v(" "),v("td",[t._v("16")]),t._v(" "),v("td",[t._v("2")]),t._v(" "),v("td",[t._v("'u0000'")]),t._v(" "),v("td",[t._v("0 ~ 65535")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("float")])]),t._v(" "),v("td",[t._v("32")]),t._v(" "),v("td",[t._v("4")]),t._v(" "),v("td",[t._v("0f")]),t._v(" "),v("td",[t._v("1.4E-45 ~ 3.4028235E38")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("double")])]),t._v(" "),v("td",[t._v("64")]),t._v(" "),v("td",[t._v("8")]),t._v(" "),v("td",[t._v("0d")]),t._v(" "),v("td",[t._v("4.9E-324 ~ 1.7976931348623157E308")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("boolean")])]),t._v(" "),v("td",[t._v("1")]),t._v(" "),v("td"),t._v(" "),v("td",[t._v("false")]),t._v(" "),v("td",[t._v("true、false")])])])]),t._v(" "),v("p",[v("strong",[t._v("注意：")])]),t._v(" "),v("ol",[v("li",[t._v("Java 里使用 "),v("code",[t._v("long")]),t._v(" 类型的数据一定要在数值后面加上 "),v("strong",[t._v("L")]),t._v("，否则将作为整型解析。")]),t._v(" "),v("li",[v("code",[t._v("char a = 'h'")]),t._v("char :单引号，"),v("code",[t._v('String a = "hello"')]),t._v(" :双引号。")])]),t._v(" "),v("p",[t._v("这八种基本类型都有对应的包装类分别为："),v("code",[t._v("Byte")]),t._v("、"),v("code",[t._v("Short")]),t._v("、"),v("code",[t._v("Integer")]),t._v("、"),v("code",[t._v("Long")]),t._v("、"),v("code",[t._v("Float")]),t._v("、"),v("code",[t._v("Double")]),t._v("、"),v("code",[t._v("Character")]),t._v("、"),v("code",[t._v("Boolean")]),t._v(" 。")]),t._v(" "),v("h3",{attrs:{id:"引用数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#引用数据类型"}},[t._v("#")]),t._v(" 引用数据类型")]),t._v(" "),v("p",[t._v("引用数据类型很多、大致包括：类、接口、数组类型、枚举类型、注解类型、字符串型")]),t._v(" "),v("h3",{attrs:{id:"自动拆箱和装箱"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#自动拆箱和装箱"}},[t._v("#")]),t._v(" 自动拆箱和装箱")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("装箱")]),t._v("：将基本类型用它们对应的引用类型包装起来；")]),t._v(" "),v("li",[v("strong",[t._v("拆箱")]),t._v("：将包装类型转换为基本数据类型；")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("byte")]),t._v(" "),v("th",[t._v("short")]),t._v(" "),v("th",[t._v("char")]),t._v(" "),v("th",[t._v("int")]),t._v(" "),v("th",[t._v("long")]),t._v(" "),v("th",[t._v("float")]),t._v(" "),v("th",[t._v("double")]),t._v(" "),v("th",[t._v("boolean")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("Byte")]),t._v(" "),v("td",[t._v("Short")]),t._v(" "),v("td",[t._v("Character")]),t._v(" "),v("td",[t._v("Integer")]),t._v(" "),v("td",[t._v("Long")]),t._v(" "),v("td",[t._v("Float")]),t._v(" "),v("td",[t._v("Double")]),t._v(" "),v("td",[t._v("Boolean")])])])]),t._v(" "),v("p",[t._v("示例")]),t._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" i "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//装箱")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//拆箱")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br")])]),v("ul",[v("li",[v("code",[t._v("Integer i = 10")]),t._v(" 等价于 "),v("code",[t._v("Integer i = Integer.valueOf(10)")])]),t._v(" "),v("li",[v("code",[t._v("int n = i")]),t._v(" 等价于 "),v("code",[t._v("int n = i.intValue()")])])]),t._v(" "),v("p",[v("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/25130481#:~:text=%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E5%92%8C%E6%8B%86%E7%AE%B1.%20%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E5%B0%B1%E6%98%AFJava%E8%87%AA%E5%8A%A8%E5%B0%86%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%E5%80%BC%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AF%B9%E5%BA%94%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%8C%E6%AF%94%E5%A6%82%E5%B0%86int%E7%9A%84%E5%8F%98%E9%87%8F%E8%BD%AC%E6%8D%A2%E6%88%90Integer%E5%AF%B9%E8%B1%A1%EF%BC%8C%E8%BF%99%E4%B8%AA%E8%BF%87%E7%A8%8B%E5%8F%AB%E5%81%9A%E8%A3%85%E7%AE%B1%EF%BC%8C%E5%8F%8D%E4%B9%8B%E5%B0%86Integer%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E6%88%90int%E7%B1%BB%E5%9E%8B%E5%80%BC%EF%BC%8C%E8%BF%99%E4%B8%AA%E8%BF%87%E7%A8%8B%E5%8F%AB%E5%81%9A%E6%8B%86%E7%AE%B1%E3%80%82.,%E5%9B%A0%E4%B8%BA%E8%BF%99%E9%87%8C%E7%9A%84%E8%A3%85%E7%AE%B1%E5%92%8C%E6%8B%86%E7%AE%B1%E6%98%AF%E8%87%AA%E5%8A%A8%E8%BF%9B%E8%A1%8C%E7%9A%84%E9%9D%9E%E4%BA%BA%E4%B8%BA%E8%BD%AC%E6%8D%A2%EF%BC%8C%E6%89%80%E4%BB%A5%E5%B0%B1%E7%A7%B0%E4%BD%9C%E4%B8%BA%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E5%92%8C%E6%8B%86%E7%AE%B1%E3%80%82.%20%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8Bbyte%2Cshort%2Cchar%2Cint%2Clong%2Cfloat%2Cdouble%E5%92%8Cboolean%E5%AF%B9%E5%BA%94%E7%9A%84%E5%B0%81%E8%A3%85%E7%B1%BB%E4%B8%BAByte%2CShort%2CCharacter%2CInteger%2CLong%2CFloat%2CDouble%2CBoolean%E3%80%82.",target:"_blank",rel:"noopener noreferrer"}},[t._v("java的自动装箱与拆箱"),v("OutboundLink")],1)]),t._v(" "),v("h3",{attrs:{id:"成员变量与局部变量的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#成员变量与局部变量的区别"}},[t._v("#")]),t._v(" 成员变量与局部变量的区别")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("语法形式")]),t._v(" ：从语法形式上看，成员变量是属于类的，而局部变量是在代码块或方法中定义的变量或是方法的参数；成员变量可以被 "),v("code",[t._v("public")]),t._v(","),v("code",[t._v("private")]),t._v(","),v("code",[t._v("static")]),t._v(" 等修饰符所修饰，而局部变量不能被访问控制修饰符及 "),v("code",[t._v("static")]),t._v(" 所修饰；但是，成员变量和局部变量都能被 "),v("code",[t._v("final")]),t._v(" 所修饰。")]),t._v(" "),v("li",[v("strong",[t._v("存储方式")]),t._v(" ：从变量在内存中的存储方式来看,如果成员变量是使用 "),v("code",[t._v("static")]),t._v(" 修饰的，那么这个成员变量是属于类的，如果没有使用 "),v("code",[t._v("static")]),t._v(" 修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。")]),t._v(" "),v("li",[v("strong",[t._v("生存时间")]),t._v(" ：从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动生成，随着方法的调用结束而消亡。")]),t._v(" "),v("li",[v("strong",[t._v("默认值")]),t._v(" ：从变量是否有默认值来看，成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外:被 "),v("code",[t._v("final")]),t._v(" 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"title"}),v("p",[v("a",{attrs:{href:"https://javaguide.cn/java/basis/java-basic-questions-01.html#%E9%9B%86%E5%90%88%E6%A6%82%E8%BF%B0",target:"_blank",rel:"noopener noreferrer"}},[t._v("java基础"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=_.exports}}]);