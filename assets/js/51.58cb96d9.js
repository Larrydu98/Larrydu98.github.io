(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{629:function(_,v,s){"use strict";s.r(v);var e=s(10),o=Object(e.a)({},(function(){var _=this,v=_.$createElement,s=_._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[s("h2",{attrs:{id:"_1-ip地址是怎样分类的-你知道吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-ip地址是怎样分类的-你知道吗"}},[_._v("#")]),_._v(" 1 IP地址是怎样分类的，你知道吗？")]),_._v(" "),s("p",[_._v("先说一下 IP 的基本特点：")]),_._v(" "),s("p",[_._v("IP地址由四段组成，每个字段是一个字节，8位，最大值是255。 IP地址由两部分组成，即网络地址和主机地址。网络地址表示其属于互联网的哪一个网络，主机地 址表示其属于该网络中的哪一台主机。")]),_._v(" "),s("p",[_._v("IP 地址主要分为A、B、C三类及特殊地址D、E这五类，甩一张"),s("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/202205191659694.png",alt:"image-20220519165918500"}})]),_._v(" "),s("p",[_._v("A类：(1.0.0.0-126.0.0.0)一般用于大型网络。")]),_._v(" "),s("p",[_._v("B类：(128.0.0.0-191.255.0.0)一般用于中等规模网络。")]),_._v(" "),s("p",[_._v("C类：(192.0.0.0-223.255.255.0)一般用于小型网络。")]),_._v(" "),s("p",[_._v("D类：是多播地址，地址的网络号取值于224~239之间，一般用于多路广播用户。")]),_._v(" "),s("p",[_._v("E类：是保留地址。地址的网络号取值于240~255之间。")]),_._v(" "),s("h2",{attrs:{id:"_2-关于子网掩码和ip地址之间的计算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-关于子网掩码和ip地址之间的计算"}},[_._v("#")]),_._v(" 2 关于子网掩码和ip地址之间的计算")]),_._v(" "),s("p",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/97740009",target:"_blank",rel:"noopener noreferrer"}},[_._v("关于ip地址的计算，都在这里"),s("OutboundLink")],1)]),_._v(" "),s("h2",{attrs:{id:"_3-session和cookie总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-session和cookie总结"}},[_._v("#")]),_._v(" 3 Session和Cookie总结")]),_._v(" "),s("p",[_._v("HTTP/1.1 引 入 Cookie 来保存状态信息。")]),_._v(" "),s("h3",{attrs:{id:"cookie"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[_._v("#")]),_._v(" cookie")]),_._v(" "),s("p",[_._v("Cookie是客户端保持状态的方法。")]),_._v(" "),s("p",[_._v("Cookie简单的理解就是存储由服务器发至客户端并由客户端保存的一段字符串。为了保持会话，服 务器可以在响应客户端请求时将Cookie字符串放在Set-Cookie下，客户机收到Cookie之后保存这 段字符串，之后再请求时候带上Cookie就可以被识别。")]),_._v(" "),s("p",[_._v("除了上面提到的这些，Cookie在客户端的保存形式可以有两种，")]),_._v(" "),s("ul",[s("li",[_._v("会话Cookie；会话Cookie就是将服务器返回的"),s("strong",[_._v("Cookie字符串保持在内存中，关闭浏览器之后自动销毁")]),_._v("，")]),_._v(" "),s("li",[_._v("持久Cookie则是"),s("strong",[_._v("存储在客户端磁盘上")]),_._v("，其"),s("strong",[_._v("有效时间")]),_._v("在服务器响应头中被指定，在有效期内，客户端再次请求服务器时都可以直接从本地取出。需要说明的是，"),s("strong",[_._v("存储在磁盘中的Cookie是可以被多个浏览器代理所共享的")]),_._v("。")])]),_._v(" "),s("h3",{attrs:{id:"session"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[_._v("#")]),_._v(" session")]),_._v(" "),s("p",[_._v("Session是服务器保持状态的方法。")]),_._v(" "),s("p",[_._v("Session是保存在服务器上的，，可以保存在数据库、文件或内存中，每个用户有独 立的Session用户在客户端上记录用户的操作。我们可以理解为每个用户有一个独一无二的Session ID作为Session文件的Hash键，通过这个值可以锁定具体的Session结构的数据，这个Session结构 中存储了用户操作行为。")]),_._v(" "),s("h3",{attrs:{id:"区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[_._v("#")]),_._v(" 区别")]),_._v(" "),s("p",[_._v("当服务器需要识别客户端时就需要结合Cookie了。每次HTTP请求的时候，客户端都会发送相应的 Cookie信息到服务端。实际上大多数的应用都是用Cookie来实现Session跟踪的，第一次创建Session的 时候，服务端会在HTTP协议中告诉客户端，需要在Cookie里面记录一个Session ID，以后每次请求把这 个会话ID发送到服务器，我就知道你是谁了。如果客户端的浏览器禁用了Cookie，会使用一种叫做URL 重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如sid=xxxxx这样的参 数，服务端据此来识别用户，这样就可以帮用户完成诸如用户名等信息自动填入的操作了。")]),_._v(" "),s("ul",[s("li",[_._v("cookie数据存放在客户的浏览器上，session数据放在服务器上")]),_._v(" "),s("li",[_._v("Cookie 只能存储 ASCII 码字符串，而 Session 则可以存储任何类型的数据，因此在考虑数据复杂 性时首选 Session；")]),_._v(" "),s("li",[_._v("cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗,如果主要考虑到安全应当使用session")]),_._v(" "),s("li",[_._v("session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，如果主要考虑到减轻服务器性能方面，应当使用COOKIE")]),_._v(" "),s("li",[_._v("单个cookie在客户端的限制是3K，就是说一个站点在客户端存放的COOKIE不能3K。")]),_._v(" "),s("li",[_._v("所以：将登陆信息等重要信息存放为SESSION;其他信息如果需要保留，可以放在COOKIE中")])]),_._v(" "),s("h2",{attrs:{id:"_4-sql注入攻击了解吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-sql注入攻击了解吗"}},[_._v("#")]),_._v(" 4 SQL注入攻击了解吗？")]),_._v(" "),s("p",[_._v("攻击者在HTTP请求中注入恶意的SQL代码，服务器使用参数构建数据库SQL命令时，恶意SQL被一起构 造，并在数据库中执行。")]),_._v(" "),s("h3",{attrs:{id:"防止sql注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#防止sql注入"}},[_._v("#")]),_._v(" 防止SQL注入")]),_._v(" "),s("p",[s("strong",[_._v("客户端")]),_._v("：")]),_._v(" "),s("ul",[s("li",[_._v("有效性检验。")]),_._v(" "),s("li",[_._v("限制字符串输入的长度。")])]),_._v(" "),s("p",[s("strong",[_._v("服务端：")])]),_._v(" "),s("ul",[s("li",[_._v("不用拼接SQL字符串；")]),_._v(" "),s("li",[_._v("使用预编译的PrepareStatement")]),_._v(" "),s("li",[_._v("有效 性检验。")]),_._v(" "),s("li",[_._v("过滤SQL需要的参数中的特殊字符。比如单引号、双引号。")])]),_._v(" "),s("h2",{attrs:{id:"_5-syn攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-syn攻击"}},[_._v("#")]),_._v(" 5 SYN攻击")]),_._v(" "),s("p",[_._v("服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的，所以服务器 容易受到SYN洪泛攻击。SYN攻击就是Client在短时间内伪造大量不存在的IP地址，并向Server不断地发 送SYN包，Server则回复确认包，并等待Client确认，由于源地址不存在，因此Server需要不断重发直至 超时，这些伪造的SYN包将长时间占用未连接队列，导致正常的SYN请求因为队列满而被丢弃，从而引 起网络拥塞甚至系统瘫痪。SYN 攻击是一种典型的 DoS/DDoS 攻击。")]),_._v(" "),s("p",[_._v("常见的防御 SYN 攻击的方法有如下几种：")]),_._v(" "),s("ul",[s("li",[_._v("缩短超时（SYN Timeout）时间")]),_._v(" "),s("li",[_._v("增加最大半连接数")]),_._v(" "),s("li",[_._v("过滤网关防护")]),_._v(" "),s("li",[_._v("SYN cookies技术")])]),_._v(" "),s("h2",{attrs:{id:"_6-tcp利用滑动窗口实现流量控制的机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-tcp利用滑动窗口实现流量控制的机制"}},[_._v("#")]),_._v(" 6 TCP利用滑动窗口实现流量控制的机制")]),_._v(" "),s("blockquote",[s("p",[_._v("流量控制是为了控制发送方发送速率，保证接收方来得及接受。TCP利用滑动窗口实现流量控制")])]),_._v(" "),s("p",[_._v("TCP 中采用滑动窗口来进行传输控制，滑动窗口的大小意味着"),s("strong",[_._v("接收方还有多大的缓冲区可以用于接收数据")]),_._v("。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为 0 时，发送方一般不能再发送数据报，但是可以发送紧急数据。")]),_._v(" "),s("h2",{attrs:{id:"_7-流量控制原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-流量控制原理"}},[_._v("#")]),_._v(" 7 流量控制原理")]),_._v(" "),s("ul",[s("li",[_._v("目的是接收方通过TCP头窗口字段告知发送方本方可接收的最大数据量，用以解决发送速率过快导 致接收方不能接收的问题。所以流量控制是点对点控制。")]),_._v(" "),s("li",[_._v("TCP是双工协议，双方可以同时通信，所以发送方接收方各自维护一个发送窗和接收窗\n"),s("ul",[s("li",[_._v("发送窗：用来限制发送方可以发送的数据大小，其中发送窗口的大小由接收端返回的TCP报文 段中窗口字段来控制，接收方通过此字段告知发送方自己的缓冲（受系统、硬件等限制）大 小。")]),_._v(" "),s("li",[_._v("接收窗：用来标记可以接收的数据大小。")])])]),_._v(" "),s("li",[_._v("TCP是流数据，发送出去的数据流可以被分为以下四部分：已发送且被确认部分 | 已发送未被确认 部分 | 未发送但可发送部分 | 不可发送部分，其中发送窗 = 已发送未确认部分 + 未发但可发送部 分。接收到的数据流可分为：已接收 | 未接收但准备接收 | 未接收不准备接收。接收窗 = 未接收但 准备接收部分。")]),_._v(" "),s("li",[_._v("发送窗内数据只有当接收到接收端某段发送数据的ACK响应时才移动发送窗，左边缘紧贴刚被确认 的数据。接收窗也只有接收到数据且最左侧连续时才移动接收窗口")])])])}),[],!1,null,null,null);v.default=o.exports}}]);