(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{623:function(t,a,s){"use strict";s.r(a);var r=s(10),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-什么是跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是跨域"}},[t._v("#")]),t._v(" 1. 什么是跨域？")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/202205012020778.png",alt:"image-20210605175504296"}})]),t._v(" "),s("p",[t._v("当前页面中的某个接口请求的地址和当前页面的地址如果"),s("strong",[t._v("协议、域名、端口其中有一项不同")]),t._v("，就说该接口跨域了")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/202205012023867.png",alt:"image-20210605180719928"}})]),t._v(" "),s("h2",{attrs:{id:"_2-为什么有跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么有跨域"}},[t._v("#")]),t._v(" 2. 为什么有跨域？")]),t._v(" "),s("p",[t._v("当出现跨域的时候浏览器会直接拒绝;")]),t._v(" "),s("p",[s("strong",[t._v("浏览器")]),t._v("为了保证网页的安全，出的"),s("strong",[t._v("同源协议策略")])]),t._v(" "),s("h2",{attrs:{id:"_3-跨域报错"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-跨域报错"}},[t._v("#")]),t._v(" 3. 跨域报错")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/202205012024379.png",alt:"image-20210605180026687"}})]),t._v(" "),s("h2",{attrs:{id:"_4-跨域解决办法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-跨域解决办法"}},[t._v("#")]),t._v(" 4. 跨域解决办法")]),t._v(" "),s("h3",{attrs:{id:"_4-1-cors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-cors"}},[t._v("#")]),t._v(" 4.1 cors")]),t._v(" "),s("p",[s("strong",[t._v("目前最常用的一种解决办法，通过设置后端")])]),t._v(" "),s("ul",[s("li",[t._v("res.setHeader('Access-Control-Allow-Origin', '*'); （设置浏览器的同原协议关闭）")]),t._v(" "),s("li",[t._v('res.setHeader("Access-Control-Allow-Methods", "GET, PUT, OPTIONS, POST");（设置http请求类型）')]),t._v(" "),s("li",[t._v('res.setHeader("Access-Control-Allow-Credentials", true);（设置响应头是否允许懈怠cookie，默认是false）')])]),t._v(" "),s("h3",{attrs:{id:"_4-2-jsonp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-jsonp"}},[t._v("#")]),t._v(" 4.2 jsonp")]),t._v(" "),s("p",[s("strong",[t._v("利用的原理是script标签可以跨域请求资源，将回调函数作为参数拼接在url中")])]),t._v(" "),s("p",[t._v("后端收到请求，调用该回调函数，并将数据作为参数返回出去，注意设置响应头返回文档类型，应该设置成javascript")]),t._v(" "),s("h4",{attrs:{id:"jsonp和ajax请求的异同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsonp和ajax请求的异同"}},[t._v("#")]),t._v(" JSONP和AJAX请求的异同")]),t._v(" "),s("h5",{attrs:{id:"相同点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相同点"}},[t._v("#")]),t._v(" 相同点：")]),t._v(" "),s("p",[t._v("使用的目的一致，都是客户端向服务端请求数据，将数据拿回客户端进行处理。")]),t._v(" "),s("h5",{attrs:{id:"不同点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不同点"}},[t._v("#")]),t._v(" 不同点：")]),t._v(" "),s("ul",[s("li",[t._v("ajax请求是一种官方推出的请求方式，通过xhr对象去实现，jsonp是民间发明，script标签实现的请求。")]),t._v(" "),s("li",[t._v("ajax是一个异步请求，jsonp是一个同步请求")]),t._v(" "),s("li",[t._v("ajax存在同源检查，jsonp不存在同源检查，后端无需做解决跨域的响应头。")]),t._v(" "),s("li",[t._v("ajax支持各种请求的方式，而jsonp只支持get请求")]),t._v(" "),s("li",[t._v("ajax的使用更加简便，而jsonp的使用较为烦。")])]),t._v(" "),s("h3",{attrs:{id:"_4-3-postmessage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-postmessage"}},[t._v("#")]),t._v(" 4.3 postmessage")]),t._v(" "),s("p",[t._v("是H5中的一个API通过iFrame进行跨域，发送数据就是通过"),s("code",[t._v("iFrame.contentWindow.postMessage")]),t._v("进行发送数据")]),t._v(" "),s("p",[t._v("而同时iFrame通过"),s("code",[t._v("adEventListerner")]),t._v("来进行监听这个数据")]),t._v(" "),s("p",[t._v("场景：一个页面中嵌入另一个iframe页面，")]),t._v(" "),s("h3",{attrs:{id:"_4-4-其他方法-node中间件、nginx反向代理、websocket等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-其他方法-node中间件、nginx反向代理、websocket等"}},[t._v("#")]),t._v(" 4.4 其他方法：node中间件、nginx反向代理、websocket等")]),t._v(" "),s("p",[t._v("主要是因为同源策略是浏览器的限制，服务器和服务器之间没有限制")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/202205012050449.png",alt:"image-20210605185226089"}}),t._v(" "),s("h3",{attrs:{id:"nginx反向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx反向代理"}},[t._v("#")]),t._v(" nginx反向代理")]),t._v(" "),s("h4",{attrs:{id:"nginx怎么处理请求的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx怎么处理请求的"}},[t._v("#")]),t._v(" Nginx怎么处理请求的？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("nginx接收一个请求后，首先由listen和server_name指令匹配server模块，再匹配server模块里的location，location就是实际地址")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("server")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("            \t\t    \t# 第一个Server区块开始，表示一个独立的虚拟主机站点\n    listen       "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8801")]),t._v("；      \t\t        # 提供服务的端口，默认"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n    server_name  localhost；    \t\t# 提供服务的域名主机名\n    location "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("            \t        # 第一个location区块开始\n        root   文件目录；       \t\t# 站点的根目录，相当于Nginx的安装目录\n        index  index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html；    \t# 默认的首页文件，多个用空格分开\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("          \t\t\t\t# 第一个location区块结果\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("           \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])])])]),t._v(" "),s("h4",{attrs:{id:"什么是正向代理和反向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是正向代理和反向代理"}},[t._v("#")]),t._v(" 什么是正向代理和反向代理？")]),t._v(" "),s("ol",[s("li",[t._v("正向代理就是一个人发送一个请求直接就到达了目标的服务器")]),t._v(" "),s("li",[t._v("反方代理就是请求统一被Nginx接收，nginx反向代理服务器接收到之后，按照一定的规 则分发给了后端的业务处理服务器进行处理了")])]),t._v(" "),s("h4",{attrs:{id:"使用-反向代理服务器的优点是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-反向代理服务器的优点是什么"}},[t._v("#")]),t._v(" 使用“反向代理服务器的优点是什么?")]),t._v(" "),s("ul",[s("li",[t._v("反向代理服务器可以隐藏源服务器的存在和特征。它充当互联网云和web服务器之间的中间层。这对于安全方面来说是很好的，特别是当您使用web托管服务时。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);