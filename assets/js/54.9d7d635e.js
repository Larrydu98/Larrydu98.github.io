(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{625:function(a,t,s){"use strict";s.r(t);var _=s(10),v=Object(_.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("总结Java多线程")]),a._v(" "),s("h2",{attrs:{id:"_1-什么是线程和进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是线程和进程"}},[a._v("#")]),a._v(" 1. 什么是线程和进程?")]),a._v(" "),s("h3",{attrs:{id:"何为进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何为进程"}},[a._v("#")]),a._v(" 何为进程?")]),a._v(" "),s("p",[a._v("进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。")]),a._v(" "),s("p",[a._v("在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。")]),a._v(" "),s("h3",{attrs:{id:"何为线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何为线程"}},[a._v("#")]),a._v(" 何为线程?")]),a._v(" "),s("p",[a._v("线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享进程的"),s("strong",[a._v("堆")]),a._v("和"),s("strong",[a._v("方法区")]),a._v("资源，但每个线程有自己的"),s("strong",[a._v("程序计数器")]),a._v("、"),s("strong",[a._v("虚拟机栈")]),a._v("和"),s("strong",[a._v("本地方法栈")]),a._v("，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程")]),a._v(" "),s("h3",{attrs:{id:"java线程的实现方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java线程的实现方式"}},[a._v("#")]),a._v(" java线程的实现方式")]),a._v(" "),s("ul",[s("li",[a._v("实现Runnable接口")]),a._v(" "),s("li",[a._v("继承Thread类。")])]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("实现Callable接口")])]),a._v(" "),s("h3",{attrs:{id:"简述线程通信的方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简述线程通信的方式"}},[a._v("#")]),a._v(" 简述线程通信的方式")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("volatile 关键词修饰变量，保证所有线程对变量访问的可见性。")])]),a._v(" "),s("li",[s("p",[a._v("synchronized关键词。确保多个线程在同一时刻只能有一个处于方法或同步块中。")])]),a._v(" "),s("li",[s("p",[a._v("wait/notify方法")])]),a._v(" "),s("li",[s("p",[a._v("IO通信")])])]),a._v(" "),s("h2",{attrs:{id:"_2-线程与进程的关系-区别及优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程与进程的关系-区别及优缺点"}},[a._v("#")]),a._v(" 2. 线程与进程的关系,区别及优缺点？")]),a._v(" "),s("p",[s("strong",[a._v("从 JVM 角度说进程和线程之间的关系")])]),a._v(" "),s("h3",{attrs:{id:"_2-1-图解进程和线程的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-图解进程和线程的关系"}},[a._v("#")]),a._v(" 2.1 图解进程和线程的关系")]),a._v(" "),s("p",[a._v("下图是 Java 内存区域，通过下图我们从 JVM 的角度来说一下线程和进程之间的关系。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/202206121055006.png",alt:"xianchengandjincheng"}})]),a._v(" "),s("p",[a._v("线程私有的运行时数据区: 程序计数器、Java 虚拟机栈、本地方法栈。")]),a._v(" "),s("p",[a._v("线程共享的运行时数据区:Java 堆、方法区。")]),a._v(" "),s("p",[s("strong",[a._v("总结：")]),a._v(" 线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。线程执行开销小，但不利于资源的管理和保护；而进程正相反。")]),a._v(" "),s("h3",{attrs:{id:"_2-2-程序计数器为什么是私有的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-程序计数器为什么是私有的"}},[a._v("#")]),a._v(" 2.2 程序计数器为什么是私有的?")]),a._v(" "),s("p",[a._v("程序计数器主要有下面两个作用：")]),a._v(" "),s("ol",[s("li",[a._v("字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。")]),a._v(" "),s("li",[a._v("在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。")])]),a._v(" "),s("h3",{attrs:{id:"_2-3-虚拟机栈和本地方法栈为什么是私有的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-虚拟机栈和本地方法栈为什么是私有的"}},[a._v("#")]),a._v(" 2.3 虚拟机栈和本地方法栈为什么是私有的?")]),a._v(" "),s("p",[a._v("所以，为了"),s("strong",[a._v("保证线程中的局部变量不被别的线程访问到")]),a._v("，虚拟机栈和本地方法栈是线程私有的")]),a._v(" "),s("h3",{attrs:{id:"_2-4-一句话简单了解堆和方法区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-一句话简单了解堆和方法区"}},[a._v("#")]),a._v(" 2.4 一句话简单了解堆和方法区")]),a._v(" "),s("p",[a._v("堆和方法区是所有线程共享的资源，其中堆是进程中最大的一块内存，主要用于存放新创建的对象 (几乎所有对象都在这里分配内存)，方法区主要用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。")]),a._v(" "),s("h3",{attrs:{id:"_2-5-并发与并行的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-并发与并行的区别"}},[a._v("#")]),a._v(" 2.5 并发与并行的区别?")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("并发")]),a._v("：多个线程访问同一个对象在同一 "),s("strong",[a._v("时间段")]),a._v(" 内执行。")]),a._v(" "),s("li",[s("strong",[a._v("并行")]),a._v("：多个线程访问同一个对象在同一 "),s("strong",[a._v("时刻")]),a._v(" 执行。")])]),a._v(" "),s("h3",{attrs:{id:"_2-6-为什么要使用多线程呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-为什么要使用多线程呢"}},[a._v("#")]),a._v(" 2.6 为什么要使用多线程呢?")]),a._v(" "),s("p",[a._v("先从总体上来说：")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("从计算机底层来说：")]),a._v(" 线程可以比作是轻量级的进程，是程序执行的最小单位,线程间的切换和调度的成本远远小于进程。另外，多核 CPU 时代意味着多个线程可以同时运行，这减少了线程上下文切换的开销。")]),a._v(" "),s("li",[s("strong",[a._v("从当代互联网发展趋势来说：")]),a._v(" 现在的系统动不动就要求百万级甚至千万级的并发量，而多线程并发编程正是开发高并发系统的基础，利用好多线程机制可以大大提高系统整体的并发能力以及性能。")])]),a._v(" "),s("p",[a._v("再深入到计算机底层来探讨：")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("单核时代")]),a._v("： 在单核时代多线程主要是为了提高单进程利用 CPU 和 IO 系统的效率。 假设只运行了一个 Java 进程的情况，当我们请求 IO 的时候，如果 Java 进程中只有一个线程，此线程被 IO 阻塞则整个进程被阻塞。CPU 和 IO 设备只有一个在运行，那么可以简单地说系统整体效率只有 50%。当使用多线程的时候，一个线程被 IO 阻塞，其他线程还可以继续使用 CPU。从而提高了 Java 进程利用系统资源的整体效率。")]),a._v(" "),s("li",[s("strong",[a._v("多核时代")]),a._v(": 多核时代多线程主要是为了提高进程利用多核 CPU 的能力。举个例子：假如我们要计算一个复杂的任务，我们只用一个线程的话，不论系统有几个 CPU 核心，都只会有一个 CPU 核心被利用到。而创建多个线程，这些线程可以被映射到底层多个 CPU 上执行，在任务中的多个线程没有资源竞争的情况下，任务执行的效率会有显著性的提高，约等于（单核时执行时间/CPU 核心数）")])]),a._v(" "),s("h3",{attrs:{id:"_2-7-多线程可能带来的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-多线程可能带来的问题"}},[a._v("#")]),a._v(" 2.7 多线程可能带来的问题")]),a._v(" "),s("p",[a._v("并发编程的目的就是为了能提高程序的执行效率提高程序运行速度，但是并发编程并不总是能提高程序运行速度的，而且并发编程可能会遇到很多问题，比如：内存泄漏、死锁、线程不安全等等。")]),a._v(" "),s("h3",{attrs:{id:"_2-8-线程的生命周期和状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-线程的生命周期和状态"}},[a._v("#")]),a._v(" 2.8 线程的生命周期和状态")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/202206151608521.png",alt:"线程周期"}})]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("创建")])]),a._v(" "),s("li",[s("strong",[a._v("就绪")])]),a._v(" "),s("li",[s("strong",[a._v("运行")])]),a._v(" "),s("li",[s("strong",[a._v("阻塞")])]),a._v(" "),s("li",[s("strong",[a._v("死亡")])])]),a._v(" "),s("h3",{attrs:{id:"_2-9-什么是上下文切换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-什么是上下文切换"}},[a._v("#")]),a._v(" 2.9 什么是上下文切换?")]),a._v(" "),s("p",[a._v("线程在执行过程中会有自己的运行条件和状态（也称上下文），比如上文所说到过的程序计数器，栈信息等。当出现如下情况的时候，线程会从占用 CPU 状态中退出。")]),a._v(" "),s("ul",[s("li",[a._v("主动让出 CPU，比如调用了 "),s("code",[a._v("sleep()")]),a._v(", "),s("code",[a._v("wait()")]),a._v(" 等。")]),a._v(" "),s("li",[a._v("时间片用完，因为操作系统要防止一个线程或者进程长时间占用CPU导致其他线程或者进程饿死。")]),a._v(" "),s("li",[a._v("调用了阻塞类型的系统中断，比如请求 IO，线程被阻塞。")]),a._v(" "),s("li",[a._v("被终止或结束运行")])]),a._v(" "),s("h3",{attrs:{id:"_2-10-什么是线程死锁如何避免"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-什么是线程死锁如何避免"}},[a._v("#")]),a._v(" 2.10 什么是线程死锁如何避免？")]),a._v(" "),s("h4",{attrs:{id:"线程死锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程死锁"}},[a._v("#")]),a._v(" 线程死锁")]),a._v(" "),s("p",[a._v("线程死锁描述的是这样一种情况：多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。")]),a._v(" "),s("p",[s("strong",[a._v("产生死锁的四个必要条件：")])]),a._v(" "),s("ol",[s("li",[a._v("互斥条件：该资源任意一个时刻只由一个线程占用。")]),a._v(" "),s("li",[a._v("请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。")]),a._v(" "),s("li",[a._v("不剥夺条件:线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。")]),a._v(" "),s("li",[a._v("循环等待条件:若干线程之间形成一种头尾相接的循环等待资源关系。")])]),a._v(" "),s("h4",{attrs:{id:"如何避免线程死锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何避免线程死锁"}},[a._v("#")]),a._v(" 如何避免线程死锁")]),a._v(" "),s("ol",[s("li",[s("strong",[a._v("破坏请求与保持条件")]),a._v(" ：一次性申请所有的资源。")]),a._v(" "),s("li",[s("strong",[a._v("破坏不剥夺条件")]),a._v(" ：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。")]),a._v(" "),s("li",[s("strong",[a._v("破坏循环等待条件")]),a._v(" ：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。")])]),a._v(" "),s("h3",{attrs:{id:"_2-11-sleep和wait的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-11-sleep和wait的区别"}},[a._v("#")]),a._v(" 2.11 sleep和wait的区别")]),a._v(" "),s("ul",[s("li",[a._v("两者最主要的区别在于："),s("strong",[s("code",[a._v("sleep()")]),a._v(" 方法没有释放锁，而 "),s("code",[a._v("wait()")]),a._v(" 方法释放了锁")]),a._v(" 。")]),a._v(" "),s("li",[a._v("两者都可以暂停线程的执行。")]),a._v(" "),s("li",[s("code",[a._v("wait()")]),a._v(" 通常被用于线程间交互/通信，"),s("code",[a._v("sleep()")]),a._v("通常被用于暂停执行。")]),a._v(" "),s("li",[s("code",[a._v("wait()")]),a._v(" 方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 "),s("code",[a._v("notify()")]),a._v("或者 "),s("code",[a._v("notifyAll()")]),a._v(" 方法。"),s("code",[a._v("sleep()")]),a._v("方法执行完成后，线程会自动苏醒。或者可以使用 "),s("code",[a._v("wait(long timeout)")]),a._v(" 超时后线程会自动苏醒。")])]),a._v(" "),s("h3",{attrs:{id:"_2-12-为什么我们调用-start-方法时会执行-run-方法-为什么我们不能直接调用-run-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-12-为什么我们调用-start-方法时会执行-run-方法-为什么我们不能直接调用-run-方法"}},[a._v("#")]),a._v(" 2.12 为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用 run() 方法？")]),a._v(" "),s("p",[a._v("这是另一个非常经典的 Java 多线程面试问题，而且在面试中会经常被问到。很简单，但是很多人都会答不上来！")]),a._v(" "),s("p",[a._v("new 一个 Thread，线程进入了新建状态。调用 "),s("code",[a._v("start()")]),a._v("方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。 "),s("code",[a._v("start()")]),a._v(" 会执行线程的相应准备工作，然后自动执行 "),s("code",[a._v("run()")]),a._v(" 方法的内容，这是真正的多线程工作。 但是，直接执行 "),s("code",[a._v("run()")]),a._v(" 方法，会把 "),s("code",[a._v("run()")]),a._v(" 方法当成一个 main 线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。")]),a._v(" "),s("h2",{attrs:{id:"_3-synchronized-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-synchronized-关键字"}},[a._v("#")]),a._v(" 3 synchronized 关键字")]),a._v(" "),s("h3",{attrs:{id:"_3-1-synchronized-关键字的了解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-synchronized-关键字的了解"}},[a._v("#")]),a._v(" 3.1  synchronized 关键字的了解")]),a._v(" "),s("p",[s("strong",[s("code",[a._v("synchronized")]),a._v(" 关键字解决的是多个线程之间访问资源的同步性，"),s("code",[a._v("synchronized")]),a._v("关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。")])]),a._v(" "),s("h3",{attrs:{id:"_3-2-synchronized-关键字的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-synchronized-关键字的使用"}},[a._v("#")]),a._v(" 3.2 synchronized 关键字的使用")]),a._v(" "),s("ol",[s("li",[s("p",[s("strong",[a._v("修饰实例方法:")]),a._v(" 作用于当前对象实例加锁，进入同步代码前要获得 "),s("strong",[a._v("当前对象实例的锁")])]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//默认锁的是this")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//业务代码")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\t\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("修饰静态方法:")]),a._v(" 也就是给当前类加锁，会作用于类的所有对象实例 ，进入同步代码前要获得 "),s("strong",[a._v("当前 class 的锁")]),a._v("。因为静态成员不属于任何一个实例对象，是类成员（ static 表明这是该类的一个静态资源，不管 new 了多少个对象，只有一份）。所以，如果一个线程 A 调用一个实例对象的非静态 synchronized 方法，而线程 B 需要调用这个实例对象所属类的静态 synchronized 方法，是允许的，不会发生互斥现象，因为访问静态 synchronized 方法占用的锁是当前类的锁，而访问非静态 synchronized 方法占用的锁是当前实例对象锁。")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//业务代码")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("修饰代码块")]),a._v(" ：指定加锁对象，对给定对象/类加锁。"),s("code",[a._v("synchronized(this|object)")]),a._v(" 表示进入同步代码库前要获得"),s("strong",[a._v("给定对象的锁")]),a._v("。"),s("code",[a._v("synchronized(类.class)")]),a._v(" 表示进入同步代码前要获得 "),s("strong",[a._v("当前 class 的锁")])])])]),a._v(" "),s("p",[s("strong",[a._v("总结：")])]),a._v(" "),s("ul",[s("li",[s("code",[a._v("synchronized")]),a._v(" 关键字加到 "),s("code",[a._v("static")]),a._v(" 静态方法和 "),s("code",[a._v("synchronized(class)")]),a._v(" 代码块上都是是给 Class 类上锁。")]),a._v(" "),s("li",[s("code",[a._v("synchronized")]),a._v(" 关键字加到实例方法上是给对象实例上锁。")]),a._v(" "),s("li",[a._v("尽量不要使用 "),s("code",[a._v("synchronized(String a)")]),a._v(" 因为 JVM 中，字符串常量池具有缓存功能！")])]),a._v(" "),s("h3",{attrs:{id:"_3-3-构造方法可以使用-synchronized-关键字修饰么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-构造方法可以使用-synchronized-关键字修饰么"}},[a._v("#")]),a._v(" 3.3 构造方法可以使用 synchronized 关键字修饰么？")]),a._v(" "),s("p",[a._v("先说结论："),s("strong",[a._v("构造方法不能使用 synchronized 关键字修饰。")])]),a._v(" "),s("p",[a._v("构造方法本身就属于线程安全的，不存在同步的构造方法一说。")]),a._v(" "),s("h3",{attrs:{id:"_3-4-谈谈-synchronized-和-reentrantlock-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-谈谈-synchronized-和-reentrantlock-的区别"}},[a._v("#")]),a._v(" 3.4 谈谈 synchronized 和 ReentrantLock 的区别")]),a._v(" "),s("h4",{attrs:{id:"两者都是可重入锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两者都是可重入锁"}},[a._v("#")]),a._v(" 两者都是可重入锁")]),a._v(" "),s("p",[s("strong",[a._v("“可重入锁”")]),a._v(" 指的是自己可以再次获取自己的内部锁。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，如果是不可重入锁的话，就会造成死锁。同一个线程每次获取锁，锁的计数器都自增 1，所以要等到锁的计数器下降为 0 时才能释放锁。")]),a._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[a._v("参考文献")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://javaguide.cn/java/concurrent/java-concurrent-questions-02.html#%E8%B0%88%E8%B0%88-synchronized-%E5%92%8C-reentrantlock-%E7%9A%84%E5%8C%BA%E5%88%AB",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java多线程"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=v.exports}}]);