(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{624:function(e,_,v){"use strict";v.r(_);var a=v(10),t=Object(a.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[e._v("总结Java容器基础")]),e._v(" "),v("h2",{attrs:{id:"_1-java集合概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-java集合概述"}},[e._v("#")]),e._v(" 1 Java集合概述")]),e._v(" "),v("p",[e._v("Java 集合， 也叫作容器，主要是由两大接口派生而来：一个是 "),v("code",[e._v("Collection")]),e._v("接口，主要用于存放单一元素；另一个是 "),v("code",[e._v("Map")]),e._v(" 接口，主要用于存放键值对。对于"),v("code",[e._v("Collection")]),e._v(" 接口，下面又有三个主要的子接口："),v("code",[e._v("List")]),e._v("、"),v("code",[e._v("Set")]),e._v(" 和 "),v("code",[e._v("Queue")])]),e._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/202206111708801.png",alt:"java集合"}})]),e._v(" "),v("h3",{attrs:{id:"_1-1-说说-list-set-queue-map-四者的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-说说-list-set-queue-map-四者的区别"}},[e._v("#")]),e._v(" 1.1 说说 List, Set, Queue, Map 四者的区别？")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("List")]),e._v("(对付顺序的好帮手): 存储的元素是有序的、可重复的。")]),e._v(" "),v("li",[v("code",[e._v("Set")]),e._v("(注重独一无二的性质): 存储的元素是无序的、不可重复的。")]),e._v(" "),v("li",[v("code",[e._v("Queue")]),e._v("(实现排队功能的叫号机): 按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。")]),e._v(" "),v("li",[v("code",[e._v("Map")]),e._v('(用 key 来搜索的专家): 使用键值对（key-value）存储，类似于数学上的函数 y=f(x)，"x" 代表 key，"y" 代表 value，key 是无序的、不可重复的，value 是无序的、可重复的，每个键最多映射到一个值。')])]),e._v(" "),v("h3",{attrs:{id:"_1-2-集合框架底层数据结构总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-集合框架底层数据结构总结"}},[e._v("#")]),e._v(" 1.2 集合框架底层数据结构总结")]),e._v(" "),v("p",[v("strong",[e._v("先说说collection接口下的集合")])]),e._v(" "),v("h4",{attrs:{id:"list"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[e._v("#")]),e._v(" List")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("Arraylist")]),e._v("： "),v("code",[e._v("Object[]")]),e._v(" 数组")]),e._v(" "),v("li",[v("code",[e._v("Vector")]),e._v("："),v("code",[e._v("Object[]")]),e._v(" 数组")]),e._v(" "),v("li",[v("code",[e._v("LinkedList")]),e._v("： 双向链表(JDK1.6 之前为循环链表，JDK1.7 取消了循环)")])]),e._v(" "),v("h4",{attrs:{id:"set"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[e._v("#")]),e._v(" Set")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("HashSet")]),e._v("(无序，唯一): 基于 "),v("code",[e._v("HashMap")]),e._v(" 实现的，底层采用 "),v("code",[e._v("HashMap")]),e._v(" 来保存元素")]),e._v(" "),v("li",[v("code",[e._v("LinkedHashSet")]),e._v(": "),v("code",[e._v("LinkedHashSet")]),e._v(" 是 "),v("code",[e._v("HashSet")]),e._v(" 的子类，并且其内部是通过 "),v("code",[e._v("LinkedHashMap")]),e._v(" 来实现的。有点类似于我们之前说的 "),v("code",[e._v("LinkedHashMap")]),e._v(" 其内部是基于 "),v("code",[e._v("HashMap")]),e._v(" 实现一样，不过还是有一点点区别的")]),e._v(" "),v("li",[v("code",[e._v("TreeSet")]),e._v("(有序，唯一): 红黑树(自平衡的排序二叉树)")])]),e._v(" "),v("h4",{attrs:{id:"queue"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[e._v("#")]),e._v(" Queue")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("PriorityQueue")]),e._v(": "),v("code",[e._v("Object[]")]),e._v(" 数组来实现二叉堆")]),e._v(" "),v("li",[v("code",[e._v("ArrayQueue")]),e._v(": "),v("code",[e._v("Object[]")]),e._v(" 数组 + 双指针")])]),e._v(" "),v("p",[v("strong",[e._v("再看看Map接口下面的集合")])]),e._v(" "),v("ul",[v("li",[v("code",[e._v("HashMap")]),e._v("JDK1.8之前 "),v("code",[e._v("HashMap")]),e._v(" 由数组+链表组成的，数组是 "),v("code",[e._v("HashMap")]),e._v(" 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间")])]),e._v(" "),v("p",[e._v("​\t"),v("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/202206120939797.png",alt:"hashmao"}})]),e._v(" "),v("ul",[v("li",[v("code",[e._v("LinkedHashMap")]),e._v(" 继承自 "),v("code",[e._v("HashMap")]),e._v("，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，"),v("code",[e._v("LinkedHashMap")]),e._v(" 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。")]),e._v(" "),v("li",[v("code",[e._v("HashTable")]),e._v("数组+链表的形式组成，数组是HashTable的主体，而链表主要是为了解决哈希冲突而存在的")]),e._v(" "),v("li",[e._v("TreeMap：红黑树")])]),e._v(" "),v("h3",{attrs:{id:"_1-3-如何选用集合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-如何选用集合"}},[e._v("#")]),e._v(" 1.3 如何选用集合")]),e._v(" "),v("p",[e._v("主要根据集合的特点来选用，比如我们需要根据键值获取到元素值时就选用 "),v("code",[e._v("Map")]),e._v(" 接口下的集合，需要排序时选择 "),v("code",[e._v("TreeMap")]),e._v(",不需要排序时就选择 "),v("code",[e._v("HashMap")]),e._v(",需要保证线程安全就选用 "),v("code",[e._v("ConcurrentHashMap")]),e._v("。")]),e._v(" "),v("p",[e._v("当我们只需要存放元素值时，就选择实现"),v("code",[e._v("Collection")]),e._v(" 接口的集合，需要保证元素唯一时选择实现 "),v("code",[e._v("Set")]),e._v(" 接口的集合比如 "),v("code",[e._v("TreeSet")]),e._v(" 或 "),v("code",[e._v("HashSet")]),e._v("，不需要就选择实现 "),v("code",[e._v("List")]),e._v(" 接口的比如 "),v("code",[e._v("ArrayList")]),e._v(" 或 "),v("code",[e._v("LinkedList")]),e._v("，然后再根据实现这些接口的集合的特点来选用。")]),e._v(" "),v("h3",{attrs:{id:"_1-4-为什么使用集合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-为什么使用集合"}},[e._v("#")]),e._v(" 1.4 为什么使用集合")]),e._v(" "),v("p",[e._v("当我们需要保存一组类型相同的数据的时候，我们应该是用一个容器来保存，这个容器就是数组，但是，使用数组存储对象具有一定的弊端， 因为我们在实际开发中，存储的数据的类型是多种多样的，于是，就出现了“集合”，集合同样也是用来存储多个数据的。")]),e._v(" "),v("p",[e._v("数组的缺点是一旦声明之后，长度就不可变了；同时，声明数组时的数据类型也决定了该数组存储的数据的类型；而且，数组存储的数据是有序的、可重复的，特点单一。 但是集合提高了数据存储的灵活性，Java 集合不仅可以用来存储不同类型不同数量的对象，还可以保存具有映射关系的数据")]),e._v(" "),v("h3",{attrs:{id:"_1-5-collection子接口list"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-collection子接口list"}},[e._v("#")]),e._v(" 1.5 Collection子接口List")]),e._v(" "),v("h4",{attrs:{id:"arraylist-和-vector-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-和-vector-的区别"}},[e._v("#")]),e._v(" Arraylist 和 Vector 的区别?")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("ArrayList")]),e._v(" 是 "),v("code",[e._v("List")]),e._v(" 的主要实现类，底层使用 "),v("code",[e._v("Object[ ]")]),e._v("存储，适用于频繁的查找工作，线程不安全；")]),e._v(" "),v("li",[v("code",[e._v("Vector")]),e._v(" 是 "),v("code",[e._v("List")]),e._v(" 的古老实现类，底层使用"),v("code",[e._v("Object[ ]")]),e._v(" 存储，线程安全的。")])]),e._v(" "),v("h4",{attrs:{id:"arraylist-和-linkedlist-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-和-linkedlist-的区别"}},[e._v("#")]),e._v(" Arraylist 和 LinkedList 的区别?")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("是否保证线程安全：")]),e._v(" "),v("code",[e._v("ArrayList")]),e._v(" 和 "),v("code",[e._v("LinkedList")]),e._v(" 都是不同步的，也就是不保证线程安全；")]),e._v(" "),v("li",[v("strong",[e._v("底层数据结构：")]),e._v(" "),v("code",[e._v("Arraylist")]),e._v(" 底层使用的是 "),v("strong",[v("code",[e._v("Object")]),e._v(" 数组")]),e._v("；"),v("code",[e._v("LinkedList")]),e._v(" 底层使用的是 "),v("strong",[e._v("双向链表")]),e._v(" 数据结构")]),e._v(" "),v("li",[v("strong",[e._v("插入和删除是否受元素位置的影响：")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("ArrayList")]),e._v(" 采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。 比如：执行"),v("code",[e._v("add(E e)")]),e._v("方法的时候， "),v("code",[e._v("ArrayList")]),e._v(" 会默认在将指定的元素追加到此列表的末尾，这种情况时间复杂度就是 O(1)。但是如果要在指定位置 i 插入和删除元素的话（"),v("code",[e._v("add(int index, E element)")]),e._v("）时间复杂度就为 O(n-i)。因为在进行上述操作的时候集合中第 i 和第 i 个元素之后的(n-i)个元素都要执行向后位/向前移一位的操作。")]),e._v(" "),v("li",[v("code",[e._v("LinkedList")]),e._v(" 采用链表存储，所以，如果是在头尾插入或者删除元素不受元素位置的影响（"),v("code",[e._v("add(E e)")]),e._v("、"),v("code",[e._v("addFirst(E e)")]),e._v("、"),v("code",[e._v("addLast(E e)")]),e._v("、"),v("code",[e._v("removeFirst()")]),e._v(" 、 "),v("code",[e._v("removeLast()")]),e._v("），时间复杂度为 O(1)，如果是要在指定位置 "),v("code",[e._v("i")]),e._v(" 插入和删除元素的话（"),v("code",[e._v("add(int index, E element)")]),e._v("，"),v("code",[e._v("remove(Object o)")]),e._v("）， 时间复杂度为 O(n) ，因为需要先移动到指定位置再插入")])])]),e._v(" "),v("li",[v("strong",[e._v("是否支持快速随机访问：")]),e._v(" "),v("code",[e._v("LinkedList")]),e._v(" 不支持高效的随机元素访问，而 "),v("code",[e._v("ArrayList")]),e._v(" 支持。快速随机访问就是通过元素的序号快速获取元素对象(对应于"),v("code",[e._v("get(int index)")]),e._v("方法)。")]),e._v(" "),v("li",[v("strong",[e._v("内存空间占用：")]),e._v(" "),v("code",[e._v("ArrayList")]),e._v(" 的空 间浪费主要体现在在 list 列表的结尾会预留一定的容量空间，而 LinkedList 的空间花费则体现在它的每一个元素都需要消耗比 ArrayList 更多的空间（因为要存放直接后继和直接前驱以及数据）。")])]),e._v(" "),v("p",[e._v("我们在项目中一般是不会使用到 "),v("code",[e._v("LinkedList")]),e._v(" 的，需要用到 "),v("code",[e._v("LinkedList")]),e._v(" 的场景几乎都可以使用 "),v("code",[e._v("ArrayList")]),e._v(" 来代替，并且，性能通常会更好！")]),e._v(" "),v("h3",{attrs:{id:"_1-6-collection子接口之set"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-collection子接口之set"}},[e._v("#")]),e._v(" 1.6 Collection子接口之Set")]),e._v(" "),v("h4",{attrs:{id:"比较-hashset、linkedhashset-和-treeset-三者的异同"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#比较-hashset、linkedhashset-和-treeset-三者的异同"}},[e._v("#")]),e._v(" 比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("HashSet")]),e._v("、"),v("code",[e._v("LinkedHashSet")]),e._v(" 和 "),v("code",[e._v("TreeSet")]),e._v(" 都是 "),v("code",[e._v("Set")]),e._v(" 接口的实现类，都能保证元素唯一，并且都不是线程安全的。")]),e._v(" "),v("li",[v("code",[e._v("HashSet")]),e._v("、"),v("code",[e._v("LinkedHashSet")]),e._v(" 和 "),v("code",[e._v("TreeSet")]),e._v(" 的主要区别在于底层数据结构不同。"),v("code",[e._v("HashSet")]),e._v(" 的底层数据结构是哈希表（基于 "),v("code",[e._v("HashMap")]),e._v(" 实现）。"),v("code",[e._v("LinkedHashSet")]),e._v(" 的底层数据结构是链表和哈希表，元素的插入和取出顺序满足 FIFO。"),v("code",[e._v("TreeSet")]),e._v(" 底层数据结构是红黑树，元素是有序的，排序的方式有自然排序和定制排序。")]),e._v(" "),v("li",[e._v("底层数据结构不同又导致这三者的应用场景不同。"),v("code",[e._v("HashSet")]),e._v(" 用于不需要保证元素插入和取出顺序的场景，"),v("code",[e._v("LinkedHashSet")]),e._v(" 用于保证元素的插入和取出顺序满足 FIFO 的场景，"),v("code",[e._v("TreeSet")]),e._v(" 用于支持对元素自定义排序规则的场景。")])]),e._v(" "),v("h3",{attrs:{id:"_1-7-collection子接口之queue"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-collection子接口之queue"}},[e._v("#")]),e._v(" 1.7 Collection子接口之Queue")]),e._v(" "),v("h4",{attrs:{id:"queue-与-deque-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#queue-与-deque-的区别"}},[e._v("#")]),e._v(" Queue 与 Deque 的区别")]),e._v(" "),v("p",[v("code",[e._v("Queue")]),e._v(" 是单端队列，只能从一端插入元素，另一端删除元素，实现上一般遵循 "),v("strong",[e._v("先进先出（FIFO）")]),e._v(" 规则。")]),e._v(" "),v("p",[v("code",[e._v("Deque")]),e._v(" 是双端队列，在队列的两端均可以插入或删除元素。")]),e._v(" "),v("h4",{attrs:{id:"arraydeque-与-linkedlist-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#arraydeque-与-linkedlist-的区别"}},[e._v("#")]),e._v(" ArrayDeque 与 LinkedList 的区别")]),e._v(" "),v("p",[v("code",[e._v("ArrayDeque")]),e._v(" 和 "),v("code",[e._v("LinkedList")]),e._v(" 都实现了 "),v("code",[e._v("Deque")]),e._v(" 接口，两者都具有队列的功能，但两者有什么区别呢？")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("ArrayDeque")]),e._v(" 是基于可变长的数组和双指针来实现，而 "),v("code",[e._v("LinkedList")]),e._v(" 则通过链表来实现。")]),e._v(" "),v("li",[v("code",[e._v("ArrayDeque")]),e._v(" 不支持存储 "),v("code",[e._v("NULL")]),e._v(" 数据，但 "),v("code",[e._v("LinkedList")]),e._v(" 支持。")]),e._v(" "),v("li",[v("code",[e._v("ArrayDeque")]),e._v(" 是在 JDK1.6 才被引入的，而"),v("code",[e._v("LinkedList")]),e._v(" 早在 JDK1.2 时就已经存在。")]),e._v(" "),v("li",[v("code",[e._v("ArrayDeque")]),e._v(" 插入时可能存在扩容过程, 不过均摊后的插入操作依然为 O(1)。虽然 "),v("code",[e._v("LinkedList")]),e._v(" 不需要扩容，但是每次插入数据时均需要申请新的堆空间，均摊性能相比更慢。")])]),e._v(" "),v("p",[e._v("从性能的角度上，选用 "),v("code",[e._v("ArrayDeque")]),e._v(" 来实现队列要比 "),v("code",[e._v("LinkedList")]),e._v(" 更好。此外，"),v("code",[e._v("ArrayDeque")]),e._v(" 也可以用于实现栈")]),e._v(" "),v("h2",{attrs:{id:"_2-map接口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-map接口"}},[e._v("#")]),e._v(" 2 Map接口")]),e._v(" "),v("h3",{attrs:{id:"_2-1-hashmap-和-hashtable-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-hashmap-和-hashtable-的区别"}},[e._v("#")]),e._v(" 2.1 HashMap 和 Hashtable 的区别")]),e._v(" "),v("ol",[v("li",[v("strong",[e._v("线程是否安全：")]),e._v(" "),v("code",[e._v("HashMap")]),e._v(" 是非线程安全的，"),v("code",[e._v("Hashtable")]),e._v(" 是线程安全的,因为 "),v("code",[e._v("Hashtable")]),e._v(" 内部的方法基本都经过"),v("code",[e._v("synchronized")]),e._v(" 修饰。（如果你要保证线程安全的话就使用 "),v("code",[e._v("ConcurrentHashMap")]),e._v(" 吧！）；")]),e._v(" "),v("li",[v("strong",[e._v("效率：")]),e._v(" 因为线程安全的问题，"),v("code",[e._v("HashMap")]),e._v(" 要比 "),v("code",[e._v("Hashtable")]),e._v(" 效率高一点。另外，"),v("code",[e._v("Hashtable")]),e._v(" 基本被淘汰，不要在代码中使用它；")]),e._v(" "),v("li",[v("strong",[e._v("对 Null key 和 Null value 的支持：")]),e._v(" "),v("code",[e._v("HashMap")]),e._v(" 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个；Hashtable 不允许有 null 键和 null 值，否则会抛出 "),v("code",[e._v("NullPointerException")]),e._v("。")]),e._v(" "),v("li",[v("strong",[e._v("初始容量大小和每次扩充容量大小的不同 ：")]),e._v(" ① 创建时如果不指定容量初始值，"),v("code",[e._v("Hashtable")]),e._v(" 默认的初始大小为 11，之后每次扩充，容量变为原来的 2n+1。"),v("code",[e._v("HashMap")]),e._v(" 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。② 创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 "),v("code",[e._v("HashMap")]),e._v(" 会将其扩充为 2 的幂次方大小（"),v("code",[e._v("HashMap")]),e._v(" 中的"),v("code",[e._v("tableSizeFor()")]),e._v("方法保证，下面给出了源代码）。也就是说 "),v("code",[e._v("HashMap")]),e._v(" 总是使用 2 的幂作为哈希表的大小,后面会介绍到为什么是 2 的幂次方。")]),e._v(" "),v("li",[v("strong",[e._v("底层数据结构：")]),e._v(" JDK1.8 以后的 "),v("code",[e._v("HashMap")]),e._v(" 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。")])]),e._v(" "),v("h3",{attrs:{id:"_2-2-hashmap-和-hashset-区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-hashmap-和-hashset-区别"}},[e._v("#")]),e._v(" 2.2 HashMap 和 HashSet 区别")]),e._v(" "),v("p",[v("code",[e._v("HashSet")]),e._v(" 底层就是基于 "),v("code",[e._v("HashMap")]),e._v(" 实现的。")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[v("code",[e._v("HashMap")])]),e._v(" "),v("th",[v("code",[e._v("HashSet")])])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("实现了 "),v("code",[e._v("Map")]),e._v(" 接口")]),e._v(" "),v("td",[e._v("实现 "),v("code",[e._v("Set")]),e._v(" 接口")])]),e._v(" "),v("tr",[v("td",[e._v("存储键值对")]),e._v(" "),v("td",[e._v("仅存储对象")])]),e._v(" "),v("tr",[v("td",[e._v("调用 "),v("code",[e._v("put()")]),e._v("向 map 中添加元素")]),e._v(" "),v("td",[e._v("调用 "),v("code",[e._v("add()")]),e._v("方法向 "),v("code",[e._v("Set")]),e._v(" 中添加元素")])]),e._v(" "),v("tr",[v("td",[v("code",[e._v("HashMap")]),e._v(" 使用键（Key）计算 "),v("code",[e._v("hashcode")])]),e._v(" "),v("td",[v("code",[e._v("HashSet")]),e._v(" 使用成员对象来计算 "),v("code",[e._v("hashcode")]),e._v(" 值，对于两个对象来说 "),v("code",[e._v("hashcode")]),e._v(" 可能相同，所以"),v("code",[e._v("equals()")]),e._v("方法用来判断对象的相等性")])])])]),e._v(" "),v("h3",{attrs:{id:"_2-3-hashmap-和-treemap-区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-hashmap-和-treemap-区别"}},[e._v("#")]),e._v(" 2.3 HashMap 和 TreeMap 区别")]),e._v(" "),v("p",[v("strong",[e._v("相比于"),v("code",[e._v("HashMap")]),e._v("来说 "),v("code",[e._v("TreeMap")]),e._v(" 主要多了对集合中的元素根据键排序的能力以及对集合内元素的搜索的能力。")])]),e._v(" "),v("details",{staticClass:"custom-block details"},[v("summary",[e._v("参考文献")]),e._v(" "),v("p",[v("a",{attrs:{href:"https://javaguide.cn/java/collection/java-collection-questions-01.html#%E9%9B%86%E5%90%88%E6%A6%82%E8%BF%B0",target:"_blank",rel:"noopener noreferrer"}},[e._v("java基础"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=t.exports}}]);