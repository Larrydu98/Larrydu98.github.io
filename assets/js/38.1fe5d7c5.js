(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{612:function(s,t,a){"use strict";a.r(t);var e=a(10),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("Git 是一个"),a("a",{attrs:{href:"https://git-scm.com/about/free-and-open-source",target:"_blank",rel:"noopener noreferrer"}},[s._v("免费和开源"),a("OutboundLink")],1),s._v("的 分布式版本控制系统，旨在以速度和效率处理从小型到大型项目的所有内容。")]),s._v(" "),a("h2",{attrs:{id:"_1-基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本概念"}},[s._v("#")]),s._v(" 1. 基本概念")]),s._v(" "),a("h3",{attrs:{id:"_1-1-git的优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-git的优势"}},[s._v("#")]),s._v(" 1.1 Git的优势")]),s._v(" "),a("p",[s._v("**"),a("code",[s._v("Git")]),s._v("是一个"),a("code",[s._v("分布式")]),s._v("代码管理工具，**可以在本地提交，不需要依赖网络，并且会将每次提交自动备份到本地。每个开发者都可以把远程仓库clone一份到本地，并会把提交历史一并拿过来。代表就是Git")]),s._v(" "),a("h3",{attrs:{id:"_1-2-文件状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-文件状态"}},[s._v("#")]),s._v(" 1.2 文件状态")]),s._v(" "),a("p",[s._v("在Git中文件大概分为三种状态："),a("code",[s._v("已修改（modified）、已暂存（staged）、已提交（committed）")])]),s._v(" "),a("ul",[a("li",[s._v("修改：Git可以感知到工作目录中哪些文件被修改了，然后把修改的文件加入到"),a("code",[s._v("modified")]),s._v("区域")]),s._v(" "),a("li",[s._v("暂存：通过add命令将工作目录中修改的文件提交到暂存区，等候被"),a("code",[s._v("commit")])]),s._v(" "),a("li",[s._v("提交：将暂存区文件"),a("code",[s._v("commit")]),s._v("至Git目录中永久保存")])]),s._v(" "),a("h3",{attrs:{id:"_1-3-commit节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-commit节点"}},[s._v("#")]),s._v(" 1.3 commit节点")]),s._v(" "),a("p",[s._v("为了便于表述，通过"),a("code",[s._v("节点")]),s._v("代称"),a("code",[s._v("commit提交")])]),s._v(" "),a("p",[s._v("在Git中每次提交都会生成一个"),a("code",[s._v("节点")]),s._v(",而每个节点都会有一个哈希值作为唯一标示，多次提交会形成一个"),a("code",[s._v("线性")]),s._v("节点链（不考虑merge的情况）")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/image-20220414150237273.png",alt:"image-20220414150237273"}})]),s._v(" "),a("p",[a("strong",[s._v("节点上方是通过 SHA1计算的哈希值")]),a("code",[s._v("C2")]),s._v("节点包含"),a("code",[s._v("C1")]),s._v("提交内容,同样"),a("code",[s._v("C3")]),s._v("节点包含"),a("code",[s._v("C1、C2")]),s._v("提交内容")]),s._v(" "),a("h3",{attrs:{id:"_1-4-head"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-head"}},[s._v("#")]),s._v(" 1.4 HEAD")]),s._v(" "),a("p",[a("code",[s._v("HEAD")]),s._v("是Git中非常重要的一个概念，你可以称它为"),a("code",[s._v("指针")]),s._v("或者"),a("code",[s._v("引用")]),s._v("，它可以指向任意一个"),a("code",[s._v("节点")]),s._v("，并且指向的节点始终为当前工作目录，换句话说就是当前工作目录(也就是你所看到的代码)就是"),a("code",[s._v("HEAD")]),s._v("指向的节点。")]),s._v(" "),a("p",[s._v("举例，如果"),a("code",[s._v("HEAD")]),s._v("指向"),a("code",[s._v("C2")]),s._v("那工作目录对应的就是"),a("code",[s._v("C2")]),s._v("节点。同时"),a("code",[s._v("HEAD")]),s._v("也可以指向一个"),a("code",[s._v("分支")]),s._v("，间接指向"),a("code",[s._v("分支")]),s._v("所指向的"),a("code",[s._v("节点")])]),s._v(" "),a("h3",{attrs:{id:"_1-5-远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-远程仓库"}},[s._v("#")]),s._v(" 1.5 远程仓库")]),s._v(" "),a("p",[s._v("虽然Git会把代码以及历史保存在本地，但最终还是要提交到服务器上的远程仓库。通过"),a("code",[s._v("clone")]),s._v("命令可以把远程仓库的代码下载到本地，同时也会将"),a("code",[s._v("提交历史")]),s._v("、"),a("code",[s._v("分支")]),s._v("、"),a("code",[s._v("HEAD")]),s._v("等状态一并同步到本地，但这些状态并不会实时更新，需要手动从远程仓库去拉取，至于何时拉、怎么拉后面章节会讲到。")]),s._v(" "),a("p",[s._v("通过远程仓库为中介，你可以和你的同事进行协同开发，开发完新功能后可以申请提交至远程仓库，同时也可以从远程仓库拉取你同事的代码。")]),s._v(" "),a("h2",{attrs:{id:"_2-分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-分支"}},[s._v("#")]),s._v(" 2. 分支")]),s._v(" "),a("h3",{attrs:{id:"_2-1-什么是分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-什么是分支"}},[s._v("#")]),s._v(" 2.1 什么是分支？")]),s._v(" "),a("p",[a("code",[s._v("分支")]),s._v("也是Git中相当重要的一个概念，当一个"),a("code",[s._v("分支")]),s._v("指向一个"),a("code",[s._v("节点")]),s._v("时，当前"),a("code",[s._v("节点")]),s._v("的内容即是该"),a("code",[s._v("分支")]),s._v("的内容，它的概念和"),a("code",[s._v("HEAD")]),s._v("非常接近同样也可以视为"),a("code",[s._v("指针")]),s._v("或"),a("code",[s._v("引用")]),s._v("，不同的是"),a("code",[s._v("分支")]),s._v("可以存在多个，而"),a("code",[s._v("HEAD")]),s._v("只有一个。通常会根据"),a("code",[s._v("功能")]),s._v("或"),a("code",[s._v("版本")]),s._v("建立不同的分支")]),s._v(" "),a("p",[s._v("那分支有什么用呢？")]),s._v(" "),a("blockquote",[a("p",[s._v("举个例子：你们的 App 经历了千辛万苦终于发布了"),a("code",[s._v("v1.0")]),s._v("版本，由于需求紧急"),a("code",[s._v("v1.0")]),s._v("上线之后便马不停蹄的开始"),a("code",[s._v("v1.1")]),s._v("，正当你开发的兴起时，QA同学说用户反馈了一些bug，需要修复然后重新发版，修复"),a("code",[s._v("v1.0")]),s._v("肯定要基于"),a("code",[s._v("v1.0")]),s._v("的代码，可是你已经开发了一部分"),a("code",[s._v("v1.1")]),s._v("了，此时怎么搞？")])]),s._v(" "),a("p",[s._v("面对上面的问题通过引入"),a("code",[s._v("分支")]),s._v("概念便可优雅的解决，如下图")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/image-20220414151340672.png",alt:"image-20220414151340672"}})]),s._v(" "),a("blockquote",[a("ul",[a("li",[s._v("先看左边示意图，假设"),a("code",[s._v("C2")]),s._v("节点既是"),a("code",[s._v("v1.0")]),s._v("版本代码，上线后在"),a("code",[s._v("C2")]),s._v("的基础上新建一个分支"),a("code",[s._v("ft-1.0")])]),s._v(" "),a("li",[s._v("再看右边示意图，在"),a("code",[s._v("v1.0")]),s._v("上线后可在"),a("code",[s._v("master")]),s._v("分支开发"),a("code",[s._v("v1.1")]),s._v("内容，收到QA同学反馈后提交"),a("code",[s._v("v1.1")]),s._v("代码生成节点"),a("code",[s._v("C3")]),s._v("，随后切换到"),a("code",[s._v("ft-1.0")]),s._v("分支做bug修复，修复完成后提交代码生成节点"),a("code",[s._v("C4")]),s._v("，然后再切换到"),a("code",[s._v("master")]),s._v("分支并合并"),a("code",[s._v("ft-1.0")]),s._v("分支，到此我们就解决了上面提出的问题")])])]),s._v(" "),a("p",[s._v("除此之外利用分支还可以做很多事情，比如现在有一个需求不确定要不要上线，但是得先做，此时可以单独创建一个分支开发该功能，等到啥时候需要上线直接合并到主分支即可。分支适用的场景很多就不一一列举了。")]),s._v(" "),a("h4",{attrs:{id:"注意点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意点"}},[s._v("#")]),s._v(" 注意点")]),s._v(" "),a("blockquote",[a("p",[s._v("当在某个节点创建一个分支后，并不会把该节点对应的代码复制一份出来，只是将新分支指向该节点，因此可以很大程度减少空间上的开销。一定要记着不管是"),a("code",[s._v("HEAD")]),s._v("还是"),a("code",[s._v("分支")]),s._v("它们都只是引用而已，量级非常轻")])]),s._v(" "),a("h2",{attrs:{id:"_3-命令详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-命令详解"}},[s._v("#")]),s._v(" 3. 命令详解")]),s._v(" "),a("h3",{attrs:{id:"_3-1-提交相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-提交相关"}},[s._v("#")]),s._v(" 3.1 提交相关")]),s._v(" "),a("p",[s._v("前面我们提到过，想要对代码进行提交必须得先加入到暂存区，Git中是通过命令 "),a("code",[s._v("add")]),s._v(" 实现")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("//添加某个文件到暂存区：\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" 文件路径\n//添加所有文件到暂存区：\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" \n//撤销工作区改动：\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout -- 文件名\n//清空暂存区：\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset HEAD 文件名\n//提交：\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"该节点的描述信息"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"_3-2-分支相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-分支相关"}},[s._v("#")]),s._v(" 3.2 分支相关")]),s._v(" "),a("h4",{attrs:{id:"创建分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建分支"}},[s._v("#")]),s._v(" 创建分支")]),s._v(" "),a("p",[s._v("创建一个分支后该分支会与"),a("code",[s._v("HEAD")]),s._v("指向同一节点，说通俗点就是"),a("code",[s._v("HEAD")]),s._v("指向哪创建的新分支就指向哪，命令如下：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" branch 分支名\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"切换分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切换分支"}},[s._v("#")]),s._v(" 切换分支")]),s._v(" "),a("p",[s._v("当切换分支后，默认情况下"),a("code",[s._v("HEAD")]),s._v("会指向当前分支，即"),a("code",[s._v("HEAD")]),s._v("间接指向当前分支指向的节点")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git checkout 分支名\n//创建的同时并切换分支\ngit checkout -b 分支名\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h4",{attrs:{id:"删除分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[s._v("#")]),s._v(" 删除分支")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" branch -d 分支名\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_3-3-合并相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-合并相关"}},[s._v("#")]),s._v(" 3.3 合并相关")]),s._v(" "),a("p",[s._v("关于合并的命令是最难掌握同时也是最重要的。我们常用的合并命令大概有三个"),a("code",[s._v("merge")]),s._v("、"),a("code",[s._v("rebase")]),s._v("、"),a("code",[s._v("cherry-pick")])]),s._v(" "),a("h4",{attrs:{id:"merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[s._v("#")]),s._v(" merge")]),s._v(" "),a("p",[a("code",[s._v("merge")]),s._v("是最常用的合并命令，它可以将某个分支或者某个节点的代码合并至当前分支。具体命令如下：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" merge 分支名/节点哈希值\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("如果需要合并的分支完全领先于当前分支")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/image-20220414152608933.png",alt:"image-20220414152608933"}})]),s._v(" "),a("p",[s._v("由于分支"),a("code",[s._v("ft-1")]),s._v("完全领先分支"),a("code",[s._v("ft-2")]),s._v("即"),a("code",[s._v("ft-1")]),s._v("完全包含"),a("code",[s._v("ft-2")]),s._v("，所以"),a("code",[s._v("ft-2")]),s._v("执行了"),a("code",[s._v("“git merge ft-1”")]),s._v("后会触发"),a("code",[s._v("fast forward(快速合并)")]),s._v("，此时两个分支指向同一节点，这是最理想的状态。但是实际开发中我们往往碰到是是下图左这种情况："),a("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/image-20220414152645332.png",alt:"image-20220414152645332"}})]),s._v(" "),a("p",[s._v("这种情况就不能直接合了，当"),a("code",[s._v("ft-2")]),s._v("执行了"),a("code",[s._v("“git merge ft-1”")]),s._v("后Git会将节点"),a("code",[s._v("C3")]),s._v("、"),a("code",[s._v("C4")]),s._v("合并随后生成一个新节点"),a("code",[s._v("C5")]),s._v("，最后将"),a("code",[s._v("ft-2")]),s._v("指向"),a("code",[s._v("C5")]),s._v(" 如上图(右)")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"},[s._v("提示")]),a("p",[s._v("如果"),a("code",[s._v("C3")]),s._v("、"),a("code",[s._v("C4")]),s._v("同时修改了同一个文件中的同一句代码，这个时候合并会出错，既合并冲突，因为Git不知道该以哪个节点为标准，所以这个时候需要我们自己手动合并代码")])]),a("h4",{attrs:{id:"rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebase"}},[s._v("#")]),s._v(" rebase")]),s._v(" "),a("p",[a("code",[s._v("rebase")]),s._v("也是一种合并指令，命令行如下：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" rebase 分支名/节点哈希值\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("与"),a("code",[s._v("merge")]),s._v("不同的是"),a("code",[s._v("rebase")]),s._v("合并看起来不会产生新的节点(实际上是会产生的，只是做了一次复制)，而是将需要合并的节点直接累加。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/image-20220414152932649.png",alt:"image-20220414152932649"}})]),s._v(" "),a("p",[s._v("当左边示意图的"),a("code",[s._v("ft-1.0")]),s._v("执行了"),a("code",[s._v("git rebase master")]),s._v("后会将"),a("code",[s._v("C4")]),s._v("节点复制一份到"),a("code",[s._v("C3")]),s._v("后面，也就是"),a("code",[s._v("C4'")]),s._v("，"),a("code",[s._v("C4")]),s._v("与"),a("code",[s._v("C4'")]),s._v("相对应，但是哈希值却不一样。")]),s._v(" "),a("p",[a("code",[s._v("rebase")]),s._v("相比于"),a("code",[s._v("merge")]),s._v("提交历史更加线性、干净，使并行的开发流程看起来像串行，更符合我们的直觉。既然"),a("code",[s._v("rebase")]),s._v("这么好用是不是可以抛弃"),a("code",[s._v("merge")]),s._v("了？其实也不是了，下面我罗列一些"),a("code",[s._v("merge")]),s._v("和"),a("code",[s._v("rebase")]),s._v("的优缺点：")]),s._v(" "),a("p",[s._v("merge优缺点：")]),s._v(" "),a("blockquote",[a("ul",[a("li",[s._v("优点：每个节点都是严格按照时间排列。当合并发生冲突时，只需要解决两个分支所指向的节点的冲突即可")]),s._v(" "),a("li",[s._v("缺点：合并两个分支时大概率会生成新的节点并"),a("code",[s._v("分叉")]),s._v("，久而久之提交历史会变成一团乱麻")])])]),s._v(" "),a("p",[s._v("rebase优缺点：")]),s._v(" "),a("blockquote",[a("ul",[a("li",[s._v("优点：会使提交历史看起来更加线性、干净")]),s._v(" "),a("li",[s._v("缺点：虽然提交看起来像是线性的，但并不是真正的按时间排序，比如图3-3中，不管"),a("code",[s._v("C4")]),s._v("早于或者晚于"),a("code",[s._v("C3")]),s._v("提交它最终都会放在"),a("code",[s._v("C3")]),s._v("后面。并且当合并发生冲突时，理论上来讲有几个节点"),a("code",[s._v("rebase")]),s._v("到目标分支就可能处理几次冲突")])])]),s._v(" "),a("h4",{attrs:{id:"cherry-pick"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cherry-pick"}},[s._v("#")]),s._v(" cherry-pick")]),s._v(" "),a("p",[a("code",[s._v("cherry-pick")]),s._v("的合并不同于"),a("code",[s._v("merge")]),s._v("和"),a("code",[s._v("rebase")]),s._v("，它可以选择某几个节点进行合并，如图")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" cherry-pick 节点哈希值\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/image-20220414153151445.png",alt:"image-20220414153151445"}})]),s._v(" "),a("p",[s._v("假设当前分支是"),a("code",[s._v("master")]),s._v("，执行了"),a("code",[s._v("git cherry-pick C3(哈希值)，C4(哈希值)")]),s._v("命令后会直接将"),a("code",[s._v("C3")]),s._v("、"),a("code",[s._v("C4")]),s._v("节点抓过来放在后面，对应"),a("code",[s._v("C3'")]),s._v("和"),a("code",[s._v("C4'")])]),s._v(" "),a("h3",{attrs:{id:"_3-4-回退相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-回退相关"}},[s._v("#")]),s._v(" 3.4 回退相关")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 恢复暂存区的指定文件到工作区")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 恢复某个commit的指定文件到暂存区和工作区")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 恢复暂存区的所有文件到工作区")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重置暂存区与工作区，与上一次commit保持一致")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --hard "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重置当前HEAD为指定commit，但保持暂存区和工作区不变")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" reset --keep "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 新建一个commit，用来撤销指定commit")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 后者的所有变化都将被前者抵消，并且应用到当前分支")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" revert "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h3",{attrs:{id:"_3-5-远程相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-远程相关"}},[s._v("#")]),s._v(" 3.5 远程相关")]),s._v(" "),a("p",[s._v("当我们接触一个新项目时，第一件事情肯定是要把它的代码拿下来，在Git中可以通过"),a("code",[s._v("clone")]),s._v("从远程仓库复制一份代码到本地，具体命令如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("git clone 仓库地址\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("前面的章节我也有提到过，"),a("code",[s._v("clone")]),s._v("不仅仅是复制代码，它还会把远程仓库的"),a("code",[s._v("引用(分支/HEAD)")]),s._v("一并取下保存在本地，")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/image-20220414153601269.png",alt:"image-20220414153601269"}})]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示所有远程仓库")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote -v\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示某个远程仓库的信息")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote show "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("remote"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 增加一个新的远程仓库，并命名")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("shortname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示所有远程仓库")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote -v\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示某个远程仓库的信息")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote show "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("remote"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 增加一个新的远程仓库，并命名")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("shortname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 上传本地指定分支到远程仓库")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("remote"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("branch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 强行推送当前分支到远程仓库，即使有冲突")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("remote"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" --force\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 推送所有分支到远程仓库")]),s._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("remote"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" --all\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h4",{attrs:{id:"问题-git-fetch与git-pull的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题-git-fetch与git-pull的区别"}},[s._v("#")]),s._v(" 问题：git fetch与git pull的区别？")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/202203171047514.jpeg",alt:"img"}})]),s._v(" "),a("p",[s._v("*远程仓库副本，**可以理解为存在于本地的远程仓库缓存。如需更新，可通过git fetch/pull命令获取远程仓库内容。使用fech获取时，并未合并到本地仓库，此时可使用git merge实现远程仓库副本与本地仓库的合并。git pull 根据配置的不同，可为git fetch + git merge 或 git fetch + git rebase。")]),s._v(" "),a("p",[s._v("在项目中经常使用git pull来拉取代码，git pull相当于是git fetch + git merge，如果此时运行git pull -r，也就是git pull –rebase，相当于git fetch + git rebase")])])}),[],!1,null,null,null);t.default=n.exports}}]);