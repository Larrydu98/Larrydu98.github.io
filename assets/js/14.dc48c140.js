(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{590:function(s,a,e){"use strict";e.r(a);var t=e(10),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("总结Docker云部署相关的知识")]),s._v(" "),e("h2",{attrs:{id:"_1-docker概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-docker概述"}},[s._v("#")]),s._v(" 1. Docker概述")]),s._v(" "),e("p",[s._v("Docker是一个基于go语言开发的开源应用容器引擎；")]),s._v(" "),e("p",[s._v("Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现"),e("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E8%99%9A%E6%8B%9F%E5%8C%96&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[s._v("虚拟化"),e("OutboundLink")],1),s._v("。")]),s._v(" "),e("h3",{attrs:{id:"_1-1-应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-应用场景"}},[s._v("#")]),s._v(" 1.1 应用场景")]),s._v(" "),e("ul",[e("li",[s._v("Web 应用的自动化打包和发布。")]),s._v(" "),e("li",[s._v("自动化测试和持续集成、发布。")]),s._v(" "),e("li",[s._v("在服务型环境中部署和调整数据库或其他的后台应用。")]),s._v(" "),e("li",[s._v("从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。")])]),s._v(" "),e("h3",{attrs:{id:"_1-2-docker优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-docker优势"}},[s._v("#")]),s._v(" 1.2 Docker优势")]),s._v(" "),e("p",[s._v("Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。")]),s._v(" "),e("h2",{attrs:{id:"_2-docker的基本组成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-docker的基本组成"}},[s._v("#")]),s._v(" 2. Docker的基本组成")]),s._v(" "),e("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/202206081958389.png",alt:"docker基本组成"}}),s._v(" "),e("p",[s._v("**镜像:**dockert镜像就好比是一个模板，可以通过这个模板来创建容器服务，tomcat镜像=>run==>tomcat01容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）。")]),s._v(" "),e("p",[e("strong",[s._v("容器（container）")]),s._v("：Docker利用容器技术，独立运行一个或者一个组应用，通过镜像来创建的。启动，停止，删除，基本命令！目前就可以把这个容器理解为就是一个简易的"),e("code",[s._v("Linux")]),s._v("系统")]),s._v(" "),e("p",[s._v("**仓库：**仓库就是存放镜像的地方！仓库分为公有仓库和私有仓库！Docker Hub(默认是国外的)")]),s._v(" "),e("h2",{attrs:{id:"_3-docker容器运行流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-docker容器运行流程"}},[s._v("#")]),s._v(" 3. Docker容器运行流程")]),s._v(" "),e("p",[s._v("启动一个容器，Docker的运行流程")]),s._v(" "),e("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/202206082003782.png",alt:"image-20220608200334753"}}),s._v(" "),e("h3",{attrs:{id:"_3-1docker为什么比vm-ware快"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1docker为什么比vm-ware快"}},[s._v("#")]),s._v(" 3.1Docker为什么比Vm Ware快")]),s._v(" "),e("ol",[e("li",[s._v("Docker比虚拟机拥有更好的抽象层")]),s._v(" "),e("li",[s._v("docker利用宿主机的内核，VM需要的是Guest OS")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/Larrydu98/BlogIMage/main/202206082025555.png",alt:"Docker"}})]),s._v(" "),e("p",[s._v("Docker新建一个容器的时候，不需要像虚拟机一样重新加载一个操作系统内核，直接利用宿主机的操作系统，而虚拟机是需要加载Guest OS。")]),s._v(" "),e("h2",{attrs:{id:"_4-docker常用的指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-docker常用的指令"}},[s._v("#")]),s._v(" 4. Docker常用的指令")]),s._v(" "),e("h3",{attrs:{id:"_4-1-基本指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-基本指令"}},[s._v("#")]),s._v(" 4.1 基本指令")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker version          #查看docker的版本信息\ndocker info             #查看docker的系统信息,包括镜像和容器的数量\ndocker 命令 --help       #帮助命令(可查看可选的参数)\ndocker COMMAND --help\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("命令的帮助文档地址:https://docs.docker.com/engine/reference/commandline/docker/")]),s._v(" "),e("h3",{attrs:{id:"_4-2-镜像命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-镜像命令"}},[s._v("#")]),s._v(" 4.2 镜像命令")]),s._v(" "),e("p",[s._v("docker images查看本地主机的所有镜像")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz99sm8v95sckz8bd2c4Z ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker images")]),s._v("\nREPOSITORY    TAG       IMAGE ID       CREATED         SIZE\nhello-world   latest    bf756fb1ae65   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(" months ago   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(".3kB\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#解释:")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".REPOSITORY  镜像的仓库源\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(".TAG  镜像的标签\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(".IMAGE ID 镜像的id\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(".CREATED 镜像的创建时间\n\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(".SIZE 镜像的大小\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可选参数")]),s._v("\n\n-a/--all 列出所有镜像\n\n-q/--quiet 只显示镜像的id\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("p",[s._v("Docker search")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("Search the Docker Hub "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" images\n\nOptions:\n  -f, --filter filter   Filter output based on conditions provided\n      --format string   Pretty-print search using a Go template\n      --limit int       Max number of search results "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("default "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      --no-trunc        Don't truncate output\n     \n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" search mysql --filter"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("STARS"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[e("strong",[s._v("docker pull 镜像名[:tag]")]),s._v(" 下载镜像")]),s._v(" "),e("p",[e("strong",[s._v("docker rmi")]),s._v(" 删除镜像")]),s._v(" "),e("h3",{attrs:{id:"_4-3-容器指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-容器指令"}},[s._v("#")]),s._v(" 4.3 容器指令")]),s._v(" "),e("p",[s._v("如拉取一个centos镜像")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker pull centos\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("运行容器的命令说明：")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("可选参数"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" image\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#参数说明")]),s._v("\n--name"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"名字"')]),s._v("           指定容器名字\n-d                     后台方式运行\n-it                    使用交互方式运行,进入容器查看内容\n-p                     指定容器的端口\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n-p ip:主机端口:容器端口  配置主机端口映射到容器端口\n-p 主机端口:容器端口\n-p 容器端口\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n-P                     随机指定端口"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("大写的P"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[s._v("运行并进入容器centos")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("[root@iZwz99sm8v95sckz8bd2c4Z ~]# docker run -it centos /bin/bash\n[root@bd1b8900c547 /]# ls      \nbin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("退出容器命令：")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("列出运行过的容器指令")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("删除容器命令：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker rm 容器id                 #删除指定的容器,不能删除正在运行的容器,强制删除使用 rm -f\ndocker rm -f $(docker ps -aq)   #删除所有的容器\ndocker ps -a -q|xargs docker rm #删除所有的容器\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("启动和停止容器命令：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("docker start 容器id          #启动容器\ndocker restart 容器id        #重启容器\ndocker stop 容器id           #停止当前运行的容器\ndocker kill 容器id           #强制停止当前容器\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("进入当前正在运行的容器")]),s._v(" "),e("p",[s._v("docker exec 进入容器后开启一个新的终端，可以在里面操作")]),s._v(" "),e("p",[s._v("docker attach 进入容器正在执行的终端，不会启动新的进程")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("[root@iZwz99sm8v95sckz8bd2c4Z ~]# docker exec -it c703b5b1911f /bin/bash\n[root@c703b5b1911f /]# ls\nbin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n[root@c703b5b1911f /]# ps -ef      \nUID        PID  PPID  C STIME TTY          TIME CMD\nroot         1     0  0 03:31 ?        00:00:00 /bin/sh -c while true;do echo hi;sleep 5;done\nroot       279     0  0 03:54 pts/0    00:00:00 /bin/bash\nroot       315     1  0 03:56 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 5\nroot       316   279  0 03:56 pts/0    00:00:00 ps -ef\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h2",{attrs:{id:"_5-docker镜像详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-docker镜像详解"}},[s._v("#")]),s._v(" 5. Docker镜像详解")]),s._v(" "),e("h3",{attrs:{id:"_5-1-什么是镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-什么是镜像"}},[s._v("#")]),s._v(" 5.1 什么是镜像")]),s._v(" "),e("p",[s._v("镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需要的所有内容，包括代码，运行时（一个程序在运行或者在被执行的依赖）、库，环境变量和配置文件。")]),s._v(" "),e("h3",{attrs:{id:"_5-2-docker镜像加载原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-docker镜像加载原理"}},[s._v("#")]),s._v(" 5.2 Docker镜像加载原理")]),s._v(" "),e("p",[s._v("Docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统是UnionFS联合文件系统。")]),s._v(" "),e("p",[s._v("UnionFS(联合文件系统)：Union文件系统(UnionFS)是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。\n特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录\nbootfs(boot file system)主要包含bootloaderi和kernel,,bootloader主要是引导加载kernel,,Linux刚启动时会加载bootfs文件系\n统，在Docker镜像的最底层是bootfs。.这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfss转交给内核，此时系统也会卸载bootfs。\nrootfs(root file system),在bootfs之上。包含的就是典型Linux系统中的/dev,/proc,bin,/etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Jbuntu,Centos等等。")]),s._v(" "),e("h3",{attrs:{id:"_5-3-分层理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-分层理解"}},[s._v("#")]),s._v(" 5.3 分层理解")]),s._v(" "),e("p",[s._v("我们可以下载一个镜像，注意观察现在的日志输出，可以看到一层一层的下载")]),s._v(" "),e("p",[s._v("这样的方式最大的好处就是资源共享，比如很多镜像都是从相同的Base镜像构建而来，那么宿主机只需要在磁盘上保留一份base进行，同时内存中也只需要加载一份base镜像，这样就可以为所有的镜像服务了，而且镜像的每一层都可以被共享的")]),s._v(" "),e("p",[s._v("查看镜像分层的方式"),e("code",[s._v("docker image inspect")]),s._v("命令")]),s._v(" "),e("p",[e("strong",[s._v("所有的Docker镜像都是起始于一个基础镜像，当进行修改或者添加新的内容的时候，就会在当前镜像之上，创建新的镜像层")])]),s._v(" "),e("blockquote",[e("p",[s._v("特点：Docker的镜像是只读的当容器启动，一个新的可写层就会被加载到镜像的顶部，这一层我们称之为容器层，容器层之下叫做进行")])]),s._v(" "),e("h3",{attrs:{id:"_5-4-提交镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-提交镜像"}},[s._v("#")]),s._v(" 5.4 提交镜像")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[s._v("使用docker commit 命令提交容器成为一个新的版本\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" commit -m"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("“提交的描述信息”  -a"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"作者"')]),s._v(" 容器id 目标镜像名:"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("TAG"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/huangjhai/article/details/118854733",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker快速入门笔记"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);